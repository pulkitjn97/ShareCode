
Remote_Diagnostics_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08004e10  08004e10  00014e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005128  08005128  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08005128  08005128  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005128  08005128  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08005130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200001e4  08005314  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005314  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098db  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001846  00000000  00000000  00029ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002bc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002753  00000000  00000000  0002c528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075a3  00000000  00000000  0002ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dabd  00000000  00000000  0003621e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a3cdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  000a3d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004df4 	.word	0x08004df4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08004df4 	.word	0x08004df4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d013      	beq.n	8000b68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b50:	e000      	b.n	8000b54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_write>:
  // The last param is timeout duration in ms
}

//Custom write funtion for printing in SWO printf Trace
int _write(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e009      	b.n	8000b9e <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	60ba      	str	r2, [r7, #8]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffc8 	bl	8000b28 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbf1      	blt.n	8000b8a <_write+0x16>
  return len;
 8000ba6:	687b      	ldr	r3, [r7, #4]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <float2Bytes.7430>:
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  void float2Bytes(uint8_t* ftoa_bytes_temp,float float_variable)
  {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	f8c7 c004 	str.w	ip, [r7, #4]
	{
      float a;
      unsigned char bytes[4];
    } thing;

    thing.a = float_variable;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	613b      	str	r3, [r7, #16]

    for (uint8_t i = 0; i < 4; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	75fb      	strb	r3, [r7, #23]
 8000bc6:	e00c      	b.n	8000be2 <float2Bytes.7430+0x32>
    {
		  ftoa_bytes_temp[i] = thing.bytes[i];
 8000bc8:	7dfa      	ldrb	r2, [r7, #23]
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	440b      	add	r3, r1
 8000bd0:	f107 0118 	add.w	r1, r7, #24
 8000bd4:	440a      	add	r2, r1
 8000bd6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000bda:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	3301      	adds	r3, #1
 8000be0:	75fb      	strb	r3, [r7, #23]
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d9ef      	bls.n	8000bc8 <float2Bytes.7430+0x18>
	}

  }
 8000be8:	bf00      	nop
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	0000      	movs	r0, r0
 8000bf4:	0000      	movs	r0, r0
	...

08000bf8 <main>:
{
 8000bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af04      	add	r7, sp, #16
int main(void)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000c06:	f000 fb75 	bl	80012f4 <HAL_Init>
  SystemClock_Config();
 8000c0a:	f000 f8bd 	bl	8000d88 <SystemClock_Config>
  MX_GPIO_Init();
 8000c0e:	f000 f959 	bl	8000ec4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c12:	f000 f8ff 	bl	8000e14 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 f92b 	bl	8000e70 <MX_USART1_UART_Init>
  while (1)
  {


	  // Indicate Start of Sequence with "S"
	  HAL_UART_Transmit(&huart1,"S", 1, 50);
 8000c1a:	2332      	movs	r3, #50	; 0x32
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4952      	ldr	r1, [pc, #328]	; (8000d68 <main+0x170>)
 8000c20:	4852      	ldr	r0, [pc, #328]	; (8000d6c <main+0x174>)
 8000c22:	f001 fbd2 	bl	80023ca <HAL_UART_Transmit>

	  //Read Fresh Accelerometer Values
	  //MPU6050_Read_Accel();

	  // Populate the Accelerometer Structure
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4850      	ldr	r0, [pc, #320]	; (8000d70 <main+0x178>)
 8000c2e:	f000 fe23 	bl	8001878 <HAL_GPIO_WritePin>
	  float2Bytes(bytes_temp,ax);
 8000c32:	4b50      	ldr	r3, [pc, #320]	; (8000d74 <main+0x17c>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	469c      	mov	ip, r3
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	484e      	ldr	r0, [pc, #312]	; (8000d78 <main+0x180>)
 8000c3e:	f7ff ffb7 	bl	8000bb0 <float2Bytes.7430>
	  HAL_UART_Transmit(&huart1,bytes_temp, sizeof(bytes_temp), 50);
 8000c42:	2332      	movs	r3, #50	; 0x32
 8000c44:	2204      	movs	r2, #4
 8000c46:	494c      	ldr	r1, [pc, #304]	; (8000d78 <main+0x180>)
 8000c48:	4848      	ldr	r0, [pc, #288]	; (8000d6c <main+0x174>)
 8000c4a:	f001 fbbe 	bl	80023ca <HAL_UART_Transmit>
	  ax= ax+0.1;
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <main+0x17c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fbe8 	bl	8000428 <__aeabi_f2d>
 8000c58:	a33d      	add	r3, pc, #244	; (adr r3, 8000d50 <main+0x158>)
 8000c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5e:	f7ff fa85 	bl	800016c <__adddf3>
 8000c62:	4603      	mov	r3, r0
 8000c64:	460c      	mov	r4, r1
 8000c66:	4618      	mov	r0, r3
 8000c68:	4621      	mov	r1, r4
 8000c6a:	f7ff ff0d 	bl	8000a88 <__aeabi_d2f>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <main+0x17c>)
 8000c72:	601a      	str	r2, [r3, #0]
	  float2Bytes(bytes_temp,ay);
 8000c74:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <main+0x184>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	469c      	mov	ip, r3
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	483e      	ldr	r0, [pc, #248]	; (8000d78 <main+0x180>)
 8000c80:	f7ff ff96 	bl	8000bb0 <float2Bytes.7430>
	  HAL_UART_Transmit(&huart1,bytes_temp, sizeof(bytes_temp), 50);
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	2204      	movs	r2, #4
 8000c88:	493b      	ldr	r1, [pc, #236]	; (8000d78 <main+0x180>)
 8000c8a:	4838      	ldr	r0, [pc, #224]	; (8000d6c <main+0x174>)
 8000c8c:	f001 fb9d 	bl	80023ca <HAL_UART_Transmit>
	  ay= ay+0.2;
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <main+0x184>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fbc7 	bl	8000428 <__aeabi_f2d>
 8000c9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000d58 <main+0x160>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fa64 	bl	800016c <__adddf3>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	460c      	mov	r4, r1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	4621      	mov	r1, r4
 8000cac:	f7ff feec 	bl	8000a88 <__aeabi_d2f>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <main+0x184>)
 8000cb4:	601a      	str	r2, [r3, #0]
	  float2Bytes(bytes_temp,az);
 8000cb6:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <main+0x188>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	469c      	mov	ip, r3
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	482d      	ldr	r0, [pc, #180]	; (8000d78 <main+0x180>)
 8000cc2:	f7ff ff75 	bl	8000bb0 <float2Bytes.7430>
	  HAL_UART_Transmit(&huart1,bytes_temp, sizeof(bytes_temp), 50);
 8000cc6:	2332      	movs	r3, #50	; 0x32
 8000cc8:	2204      	movs	r2, #4
 8000cca:	492b      	ldr	r1, [pc, #172]	; (8000d78 <main+0x180>)
 8000ccc:	4827      	ldr	r0, [pc, #156]	; (8000d6c <main+0x174>)
 8000cce:	f001 fb7c 	bl	80023ca <HAL_UART_Transmit>
	  az= az+0.3;
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <main+0x188>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fba6 	bl	8000428 <__aeabi_f2d>
 8000cdc:	a320      	add	r3, pc, #128	; (adr r3, 8000d60 <main+0x168>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	f7ff fa43 	bl	800016c <__adddf3>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460c      	mov	r4, r1
 8000cea:	4618      	mov	r0, r3
 8000cec:	4621      	mov	r1, r4
 8000cee:	f7ff fecb 	bl	8000a88 <__aeabi_d2f>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <main+0x188>)
 8000cf6:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <main+0x178>)
 8000d00:	f000 fdba 	bl	8001878 <HAL_GPIO_WritePin>

	  //float f;
	  //memcpy(&f, &bytes_temp, sizeof(f));
	  //return f;

	  printf ("Data Sent is Ax= %.2f Ay=%.2f Az=%.2f \n", ax, ay, az);
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <main+0x17c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fb8d 	bl	8000428 <__aeabi_f2d>
 8000d0e:	4680      	mov	r8, r0
 8000d10:	4689      	mov	r9, r1
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <main+0x184>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb86 	bl	8000428 <__aeabi_f2d>
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <main+0x188>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fb7f 	bl	8000428 <__aeabi_f2d>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d32:	e9cd 4500 	strd	r4, r5, [sp]
 8000d36:	4642      	mov	r2, r8
 8000d38:	464b      	mov	r3, r9
 8000d3a:	4812      	ldr	r0, [pc, #72]	; (8000d84 <main+0x18c>)
 8000d3c:	f002 f984 	bl	8003048 <iprintf>
	  //printf ("Data Sent is Ax= %d \n", iax);

	  // Indicate End of Sequence with "Z"
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"b", sizeof("b"), 50);
	  HAL_Delay(500); // Delay for 500ms
 8000d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d44:	f000 fb38 	bl	80013b8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,"S", 1, 50);
 8000d48:	e767      	b.n	8000c1a <main+0x22>
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fb99999 	.word	0x3fb99999
 8000d58:	9999999a 	.word	0x9999999a
 8000d5c:	3fc99999 	.word	0x3fc99999
 8000d60:	33333333 	.word	0x33333333
 8000d64:	3fd33333 	.word	0x3fd33333
 8000d68:	08004e10 	.word	0x08004e10
 8000d6c:	20000264 	.word	0x20000264
 8000d70:	40011000 	.word	0x40011000
 8000d74:	20000200 	.word	0x20000200
 8000d78:	200002a4 	.word	0x200002a4
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004
 8000d84:	08004e14 	.word	0x08004e14

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fcfe 	bl	8002798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fe91 	bl	8001af8 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f000 f8ca 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 f8fc 	bl	8001ff8 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e06:	f000 f8b5 	bl	8000f74 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	; 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <MX_I2C1_Init+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_I2C1_Init+0x58>)
 8000e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e52:	f000 fd29 	bl	80018a8 <HAL_I2C_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e5c:	f000 f88a 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000210 	.word	0x20000210
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	000186a0 	.word	0x000186a0

08000e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART1_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f001 fa42 	bl	8002330 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f85f 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000264 	.word	0x20000264
 8000ec0:	40013800 	.word	0x40013800

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_GPIO_Init+0xa8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_GPIO_Init+0xac>)
 8000f40:	f000 fc9a 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xac>)
 8000f5e:	f000 fb31 	bl	80015c4 <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40011000 	.word	0x40011000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <HAL_I2C_MspInit+0x70>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d123      	bne.n	800104c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_I2C_MspInit+0x74>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101c:	23c0      	movs	r3, #192	; 0xc0
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_I2C_MspInit+0x78>)
 8001030:	f000 fac8 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_I2C_MspInit+0x74>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103e:	61d3      	str	r3, [r2, #28]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	40010c00 	.word	0x40010c00

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_UART_MspInit+0x8c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d131      	bne.n	80010e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0x90>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_UART_MspInit+0x90>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_UART_MspInit+0x90>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x90>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x90>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_MspInit+0x90>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <HAL_UART_MspInit+0x94>)
 80010c6:	f000 fa7d 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_UART_MspInit+0x94>)
 80010e0:	f000 fa70 	bl	80015c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010800 	.word	0x40010800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <HardFault_Handler+0x4>

0800110a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <BusFault_Handler+0x4>

08001116 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <UsageFault_Handler+0x4>

0800111c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f91c 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
	}

return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ac:	605a      	str	r2, [r3, #4]
	return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <_isatty>:

int _isatty(int file)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	return 1;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	return 0;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x50>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x16>
		heap_end = &end;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <_sbrk+0x50>)
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <_sbrk+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <_sbrk+0x50>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <_sbrk+0x50>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	466a      	mov	r2, sp
 800120e:	4293      	cmp	r3, r2
 8001210:	d907      	bls.n	8001222 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001212:	f001 fa97 	bl	8002744 <__errno>
 8001216:	4602      	mov	r2, r0
 8001218:	230c      	movs	r3, #12
 800121a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e006      	b.n	8001230 <_sbrk+0x48>
	}

	heap_end += incr;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <_sbrk+0x50>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <_sbrk+0x50>)
 800122c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000204 	.word	0x20000204
 800123c:	200002c0 	.word	0x200002c0

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <SystemInit+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <SystemInit+0x5c>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0x5c>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4911      	ldr	r1, [pc, #68]	; (800129c <SystemInit+0x5c>)
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SystemInit+0x60>)
 8001258:	4013      	ands	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <SystemInit+0x5c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <SystemInit+0x5c>)
 8001262:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SystemInit+0x5c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SystemInit+0x5c>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <SystemInit+0x5c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <SystemInit+0x5c>)
 800127e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001282:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SystemInit+0x5c>)
 8001286:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800128a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SystemInit+0x64>)
 800128e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001292:	609a      	str	r2, [r3, #8]
#endif 
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	f8ff0000 	.word	0xf8ff0000
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012aa:	e003      	b.n	80012b4 <LoopCopyDataInit>

080012ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012b2:	3104      	adds	r1, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012bc:	d3f6      	bcc.n	80012ac <CopyDataInit>
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012c0:	e002      	b.n	80012c8 <LoopFillZerobss>

080012c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012c4:	f842 3b04 	str.w	r3, [r2], #4

080012c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012cc:	d3f9      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ce:	f7ff ffb7 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f001 fa3d 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d6:	f7ff fc8f 	bl	8000bf8 <main>
  bx lr
 80012da:	4770      	bx	lr
  ldr r3, =_sidata
 80012dc:	08005130 	.word	0x08005130
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80012e8:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80012ec:	200002bc 	.word	0x200002bc

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x28>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x28>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f929 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fe36 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f933 	bl	80015aa <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f909 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000008 	.word	0x20000008
 8001378:	20000010 	.word	0x20000010
 800137c:	2000000c 	.word	0x2000000c

08001380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x20>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_IncTick+0x20>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000010 	.word	0x20000010
 80013a0:	200002b4 	.word	0x200002b4

080013a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_GetTick+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	200002b4 	.word	0x200002b4

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff fff0 	bl	80013a4 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_Delay+0x40>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffe0 	bl	80013a4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000010 	.word	0x20000010

080013fc <__NVIC_SetPriorityGrouping>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_SetPriority>:
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Config>:
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff90 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff49 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff5e 	bl	8001444 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff90 	bl	80014b4 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffb0 	bl	8001518 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b08b      	sub	sp, #44	; 0x2c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e127      	b.n	8001828 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d8:	2201      	movs	r2, #1
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8116 	bne.w	8001822 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d034      	beq.n	8001668 <HAL_GPIO_Init+0xa4>
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d80d      	bhi.n	800161e <HAL_GPIO_Init+0x5a>
 8001602:	2b02      	cmp	r3, #2
 8001604:	d02b      	beq.n	800165e <HAL_GPIO_Init+0x9a>
 8001606:	2b02      	cmp	r3, #2
 8001608:	d804      	bhi.n	8001614 <HAL_GPIO_Init+0x50>
 800160a:	2b00      	cmp	r3, #0
 800160c:	d031      	beq.n	8001672 <HAL_GPIO_Init+0xae>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d01c      	beq.n	800164c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001612:	e048      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001614:	2b03      	cmp	r3, #3
 8001616:	d043      	beq.n	80016a0 <HAL_GPIO_Init+0xdc>
 8001618:	2b11      	cmp	r3, #17
 800161a:	d01b      	beq.n	8001654 <HAL_GPIO_Init+0x90>
          break;
 800161c:	e043      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800161e:	4a89      	ldr	r2, [pc, #548]	; (8001844 <HAL_GPIO_Init+0x280>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d026      	beq.n	8001672 <HAL_GPIO_Init+0xae>
 8001624:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_GPIO_Init+0x280>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d806      	bhi.n	8001638 <HAL_GPIO_Init+0x74>
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_GPIO_Init+0x284>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d020      	beq.n	8001672 <HAL_GPIO_Init+0xae>
 8001630:	4a86      	ldr	r2, [pc, #536]	; (800184c <HAL_GPIO_Init+0x288>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01d      	beq.n	8001672 <HAL_GPIO_Init+0xae>
          break;
 8001636:	e036      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001638:	4a85      	ldr	r2, [pc, #532]	; (8001850 <HAL_GPIO_Init+0x28c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0xae>
 800163e:	4a85      	ldr	r2, [pc, #532]	; (8001854 <HAL_GPIO_Init+0x290>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d016      	beq.n	8001672 <HAL_GPIO_Init+0xae>
 8001644:	4a84      	ldr	r2, [pc, #528]	; (8001858 <HAL_GPIO_Init+0x294>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0xae>
          break;
 800164a:	e02c      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e028      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e023      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	3308      	adds	r3, #8
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e01e      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	330c      	adds	r3, #12
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e019      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167a:	2304      	movs	r3, #4
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e012      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	611a      	str	r2, [r3, #16]
          break;
 8001692:	e008      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	615a      	str	r2, [r3, #20]
          break;
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2bff      	cmp	r3, #255	; 0xff
 80016aa:	d801      	bhi.n	80016b0 <HAL_GPIO_Init+0xec>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	e001      	b.n	80016b4 <HAL_GPIO_Init+0xf0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3304      	adds	r3, #4
 80016b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2bff      	cmp	r3, #255	; 0xff
 80016ba:	d802      	bhi.n	80016c2 <HAL_GPIO_Init+0xfe>
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x104>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3b08      	subs	r3, #8
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	210f      	movs	r1, #15
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	6a39      	ldr	r1, [r7, #32]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8096 	beq.w	8001822 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_GPIO_Init+0x298>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_GPIO_Init+0x298>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_GPIO_Init+0x298>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800170e:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_GPIO_Init+0x29c>)
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4013      	ands	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x19e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4a      	ldr	r2, [pc, #296]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x19a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a49      	ldr	r2, [pc, #292]	; (800186c <HAL_GPIO_Init+0x2a8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x196>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a48      	ldr	r2, [pc, #288]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x192>
 8001752:	2303      	movs	r3, #3
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x1a0>
 8001756:	2304      	movs	r3, #4
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x1a0>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x1a0>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x1a0>
 8001762:	2300      	movs	r3, #0
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001774:	493a      	ldr	r1, [pc, #232]	; (8001860 <HAL_GPIO_Init+0x29c>)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4938      	ldr	r1, [pc, #224]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
 800179a:	e006      	b.n	80017aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	4933      	ldr	r1, [pc, #204]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	492e      	ldr	r1, [pc, #184]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	4929      	ldr	r1, [pc, #164]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	4924      	ldr	r1, [pc, #144]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
 80017ea:	e006      	b.n	80017fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	491f      	ldr	r1, [pc, #124]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	491a      	ldr	r1, [pc, #104]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	60cb      	str	r3, [r1, #12]
 8001812:	e006      	b.n	8001822 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	43db      	mvns	r3, r3
 800181c:	4915      	ldr	r1, [pc, #84]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 800181e:	4013      	ands	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f aed0 	bne.w	80015d8 <HAL_GPIO_Init+0x14>
  }
}
 8001838:	bf00      	nop
 800183a:	372c      	adds	r7, #44	; 0x2c
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	10210000 	.word	0x10210000
 8001848:	10110000 	.word	0x10110000
 800184c:	10120000 	.word	0x10120000
 8001850:	10310000 	.word	0x10310000
 8001854:	10320000 	.word	0x10320000
 8001858:	10220000 	.word	0x10220000
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40011000 	.word	0x40011000
 8001870:	40011400 	.word	0x40011400
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e10f      	b.n	8001ada <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fb88 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2224      	movs	r2, #36	; 0x24
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018ec:	f000 fcda 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4a7b      	ldr	r2, [pc, #492]	; (8001ae4 <HAL_I2C_Init+0x23c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d807      	bhi.n	800190c <HAL_I2C_Init+0x64>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <HAL_I2C_Init+0x240>)
 8001900:	4293      	cmp	r3, r2
 8001902:	bf94      	ite	ls
 8001904:	2301      	movls	r3, #1
 8001906:	2300      	movhi	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	e006      	b.n	800191a <HAL_I2C_Init+0x72>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_I2C_Init+0x244>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0db      	b.n	8001ada <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <HAL_I2C_Init+0x248>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9b      	lsrs	r3, r3, #18
 800192c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	430a      	orrs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a64      	ldr	r2, [pc, #400]	; (8001ae4 <HAL_I2C_Init+0x23c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d802      	bhi.n	800195c <HAL_I2C_Init+0xb4>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3301      	adds	r3, #1
 800195a:	e009      	b.n	8001970 <HAL_I2C_Init+0xc8>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <HAL_I2C_Init+0x24c>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	3301      	adds	r3, #1
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	430b      	orrs	r3, r1
 8001976:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001982:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4956      	ldr	r1, [pc, #344]	; (8001ae4 <HAL_I2C_Init+0x23c>)
 800198c:	428b      	cmp	r3, r1
 800198e:	d80d      	bhi.n	80019ac <HAL_I2C_Init+0x104>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e59      	subs	r1, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fbb1 f3f3 	udiv	r3, r1, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	bf38      	it	cc
 80019a8:	2304      	movcc	r3, #4
 80019aa:	e04f      	b.n	8001a4c <HAL_I2C_Init+0x1a4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_I2C_Init+0x130>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	e012      	b.n	80019fe <HAL_I2C_Init+0x156>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Init+0x15e>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e022      	b.n	8001a4c <HAL_I2C_Init+0x1a4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10e      	bne.n	8001a2c <HAL_I2C_Init+0x184>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e58      	subs	r0, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2a:	e00f      	b.n	8001a4c <HAL_I2C_Init+0x1a4>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	6809      	ldr	r1, [r1, #0]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6911      	ldr	r1, [r2, #16]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	000186a0 	.word	0x000186a0
 8001ae8:	001e847f 	.word	0x001e847f
 8001aec:	003d08ff 	.word	0x003d08ff
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e26c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8087 	beq.w	8001c26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b18:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d00c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b24:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d112      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5e>
 8001b30:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d10b      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3e:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x12c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d168      	bne.n	8001c24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e246      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x76>
 8001b60:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a7f      	ldr	r2, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e02e      	b.n	8001bcc <HAL_RCC_OscConfig+0xd4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x98>
 8001b76:	4b7b      	ldr	r3, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7a      	ldr	r2, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b78      	ldr	r3, [pc, #480]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a77      	ldr	r2, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xd4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xbc>
 8001b9a:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a71      	ldr	r2, [pc, #452]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xd4>
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6a      	ldr	r2, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fbe6 	bl	80013a4 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fbe2 	bl	80013a4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1fa      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xe4>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fbd2 	bl	80013a4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fbce 	bl	80013a4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1e6      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x10c>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c32:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x18c>
 8001c4a:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x176>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1ba      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4939      	ldr	r1, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fb87 	bl	80013a4 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb83 	bl	80013a4 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e19b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4927      	ldr	r1, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fb66 	bl	80013a4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fb62 	bl	80013a4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e17a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d03a      	beq.n	8001d7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d019      	beq.n	8001d42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fb46 	bl	80013a4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fb42 	bl	80013a4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e15a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f000 fada 	bl	80022f4 <RCC_Delay>
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d48:	f7ff fb2c 	bl	80013a4 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4e:	e00f      	b.n	8001d70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fb28 	bl	80013a4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d908      	bls.n	8001d70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e140      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	42420000 	.word	0x42420000
 8001d6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	4b9e      	ldr	r3, [pc, #632]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e9      	bne.n	8001d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80a6 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b97      	ldr	r3, [pc, #604]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10d      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b94      	ldr	r3, [pc, #592]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a93      	ldr	r2, [pc, #588]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b91      	ldr	r3, [pc, #580]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b8e      	ldr	r3, [pc, #568]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a8a      	ldr	r2, [pc, #552]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fae9 	bl	80013a4 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7ff fae5 	bl	80013a4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	; 0x64
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0fd      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x312>
 8001dfc:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a7a      	ldr	r2, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e02d      	b.n	8001e66 <HAL_RCC_OscConfig+0x36e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x334>
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a75      	ldr	r2, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a72      	ldr	r2, [pc, #456]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	e01c      	b.n	8001e66 <HAL_RCC_OscConfig+0x36e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x356>
 8001e34:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a6c      	ldr	r2, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a69      	ldr	r2, [pc, #420]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e00b      	b.n	8001e66 <HAL_RCC_OscConfig+0x36e>
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a66      	ldr	r2, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a63      	ldr	r2, [pc, #396]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d015      	beq.n	8001e9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fa99 	bl	80013a4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff fa95 	bl	80013a4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0ab      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	4b57      	ldr	r3, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ee      	beq.n	8001e76 <HAL_RCC_OscConfig+0x37e>
 8001e98:	e014      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fa83 	bl	80013a4 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fa7f 	bl	80013a4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e095      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ee      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d105      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eca:	4b48      	ldr	r3, [pc, #288]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a47      	ldr	r2, [pc, #284]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8081 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d061      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d146      	bne.n	8001f82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <HAL_RCC_OscConfig+0x4fc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fa53 	bl	80013a4 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fa4f 	bl	80013a4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e067      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	492d      	ldr	r1, [pc, #180]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a19      	ldr	r1, [r3, #32]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	4927      	ldr	r1, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x4fc>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fa23 	bl	80013a4 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fa1f 	bl	80013a4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e037      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x46a>
 8001f80:	e02f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_RCC_OscConfig+0x4fc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fa0c 	bl	80013a4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fa08 	bl	80013a4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e020      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x498>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e013      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42420060 	.word	0x42420060

08001ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0d0      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d910      	bls.n	800203c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4965      	ldr	r1, [pc, #404]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0b8      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	494d      	ldr	r1, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d040      	beq.n	8002118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d115      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e073      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06b      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4936      	ldr	r1, [pc, #216]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e8:	f7ff f95c 	bl	80013a4 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7ff f958 	bl	80013a4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e053      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d210      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0207 	bic.w	r2, r3, #7
 800212e:	4922      	ldr	r1, [pc, #136]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e032      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002186:	f000 f821 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	fa21 f303 	lsr.w	r3, r1, r3
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1cc>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1d0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f8ba 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40022000 	.word	0x40022000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004e50 	.word	0x08004e50
 80021c4:	20000008 	.word	0x20000008
 80021c8:	2000000c 	.word	0x2000000c

080021cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	b490      	push	{r4, r7}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d4:	1d3c      	adds	r4, r7, #4
 80021d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x40>
 8002206:	2b08      	cmp	r3, #8
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x46>
 800220a:	e02d      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800220e:	623b      	str	r3, [r7, #32]
      break;
 8002210:	e02d      	b.n	800226e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	0c9b      	lsrs	r3, r3, #18
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800221e:	4413      	add	r3, r2
 8002220:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002224:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c5b      	lsrs	r3, r3, #17
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800223e:	4413      	add	r3, r2
 8002240:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002244:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800224a:	fb02 f203 	mul.w	r2, r2, r3
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	e004      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <HAL_RCC_GetSysClockFreq+0xc0>)
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	623b      	str	r3, [r7, #32]
      break;
 8002266:	e002      	b.n	800226e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800226a:	623b      	str	r3, [r7, #32]
      break;
 800226c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226e:	6a3b      	ldr	r3, [r7, #32]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bc90      	pop	{r4, r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	08004e3c 	.word	0x08004e3c
 8002280:	08004e4c 	.word	0x08004e4c
 8002284:	40021000 	.word	0x40021000
 8002288:	007a1200 	.word	0x007a1200
 800228c:	003d0900 	.word	0x003d0900

08002290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000008 	.word	0x20000008

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022a8:	f7ff fff2 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022ac:	4601      	mov	r1, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4a03      	ldr	r2, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08004e60 	.word	0x08004e60

080022cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d0:	f7ff ffde 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022d4:	4601      	mov	r1, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	0adb      	lsrs	r3, r3, #11
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08004e60 	.word	0x08004e60

080022f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <RCC_Delay+0x34>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <RCC_Delay+0x38>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002310:	bf00      	nop
  }
  while (Delay --);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <RCC_Delay+0x1c>
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000008 	.word	0x20000008
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e03f      	b.n	80023c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fe82 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f90b 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b088      	sub	sp, #32
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 8083 	bne.w	80024f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_UART_Transmit+0x2e>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e07b      	b.n	80024f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_UART_Transmit+0x40>
 8002406:	2302      	movs	r3, #2
 8002408:	e074      	b.n	80024f4 <HAL_UART_Transmit+0x12a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2221      	movs	r2, #33	; 0x21
 800241c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002420:	f7fe ffc0 	bl	80013a4 <HAL_GetTick>
 8002424:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002432:	e042      	b.n	80024ba <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244a:	d122      	bne.n	8002492 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f850 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e046      	b.n	80024f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002478:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3302      	adds	r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	e017      	b.n	80024ba <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3301      	adds	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	e013      	b.n	80024ba <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f82d 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e023      	b.n	80024f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	60ba      	str	r2, [r7, #8]
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1b7      	bne.n	8002434 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2200      	movs	r2, #0
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f814 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e00a      	b.n	80024f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
  }
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250c:	e02c      	b.n	8002568 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d028      	beq.n	8002568 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <UART_WaitOnFlagUntilTimeout+0x30>
 800251c:	f7fe ff42 	bl	80013a4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	429a      	cmp	r2, r3
 800252a:	d21d      	bcs.n	8002568 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800253a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e00f      	b.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d0c3      	beq.n	800250e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ca:	f023 030c 	bic.w	r3, r3, #12
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a52      	ldr	r2, [pc, #328]	; (800273c <UART_SetConfig+0x1ac>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d14e      	bne.n	8002696 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f8:	f7ff fe68 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 80025fc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	009a      	lsls	r2, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <UART_SetConfig+0x1b0>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	0119      	lsls	r1, r3, #4
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <UART_SetConfig+0x1b0>)
 8002636:	fba3 0302 	umull	r0, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	; 0x32
 8002648:	4a3d      	ldr	r2, [pc, #244]	; (8002740 <UART_SetConfig+0x1b0>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002654:	4419      	add	r1, r3
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009a      	lsls	r2, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fbb2 f2f3 	udiv	r2, r2, r3
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <UART_SetConfig+0x1b0>)
 800266e:	fba3 0302 	umull	r0, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2064      	movs	r0, #100	; 0x64
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	; 0x32
 8002680:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <UART_SetConfig+0x1b0>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	440a      	add	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002694:	e04d      	b.n	8002732 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002696:	f7ff fe05 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 800269a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009a      	lsls	r2, r3, #2
 80026a6:	441a      	add	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4a23      	ldr	r2, [pc, #140]	; (8002740 <UART_SetConfig+0x1b0>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	0119      	lsls	r1, r3, #4
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	441a      	add	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <UART_SetConfig+0x1b0>)
 80026d4:	fba3 0302 	umull	r0, r3, r3, r2
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	2064      	movs	r0, #100	; 0x64
 80026dc:	fb00 f303 	mul.w	r3, r0, r3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	3332      	adds	r3, #50	; 0x32
 80026e6:	4a16      	ldr	r2, [pc, #88]	; (8002740 <UART_SetConfig+0x1b0>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f2:	4419      	add	r1, r3
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	fbb2 f2f3 	udiv	r2, r2, r3
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <UART_SetConfig+0x1b0>)
 800270c:	fba3 0302 	umull	r0, r3, r3, r2
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	2064      	movs	r0, #100	; 0x64
 8002714:	fb00 f303 	mul.w	r3, r0, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <UART_SetConfig+0x1b0>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	440a      	add	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40013800 	.word	0x40013800
 8002740:	51eb851f 	.word	0x51eb851f

08002744 <__errno>:
 8002744:	4b01      	ldr	r3, [pc, #4]	; (800274c <__errno+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000014 	.word	0x20000014

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2500      	movs	r5, #0
 8002754:	4e0c      	ldr	r6, [pc, #48]	; (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	; (800278c <__libc_init_array+0x3c>)
 8002758:	1ba4      	subs	r4, r4, r6
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a5      	cmp	r5, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f002 fb48 	bl	8004df4 <_init>
 8002764:	2500      	movs	r5, #0
 8002766:	4e0a      	ldr	r6, [pc, #40]	; (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	; (8002794 <__libc_init_array+0x44>)
 800276a:	1ba4      	subs	r4, r4, r6
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a5      	cmp	r5, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002778:	4798      	blx	r3
 800277a:	3501      	adds	r5, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002782:	4798      	blx	r3
 8002784:	3501      	adds	r5, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	08005128 	.word	0x08005128
 800278c:	08005128 	.word	0x08005128
 8002790:	08005128 	.word	0x08005128
 8002794:	0800512c 	.word	0x0800512c

08002798 <memset>:
 8002798:	4603      	mov	r3, r0
 800279a:	4402      	add	r2, r0
 800279c:	4293      	cmp	r3, r2
 800279e:	d100      	bne.n	80027a2 <memset+0xa>
 80027a0:	4770      	bx	lr
 80027a2:	f803 1b01 	strb.w	r1, [r3], #1
 80027a6:	e7f9      	b.n	800279c <memset+0x4>

080027a8 <__cvt>:
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ae:	461e      	mov	r6, r3
 80027b0:	bfbb      	ittet	lt
 80027b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80027b6:	461e      	movlt	r6, r3
 80027b8:	2300      	movge	r3, #0
 80027ba:	232d      	movlt	r3, #45	; 0x2d
 80027bc:	b088      	sub	sp, #32
 80027be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80027c0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80027c4:	f027 0720 	bic.w	r7, r7, #32
 80027c8:	2f46      	cmp	r7, #70	; 0x46
 80027ca:	4614      	mov	r4, r2
 80027cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80027ce:	700b      	strb	r3, [r1, #0]
 80027d0:	d004      	beq.n	80027dc <__cvt+0x34>
 80027d2:	2f45      	cmp	r7, #69	; 0x45
 80027d4:	d100      	bne.n	80027d8 <__cvt+0x30>
 80027d6:	3501      	adds	r5, #1
 80027d8:	2302      	movs	r3, #2
 80027da:	e000      	b.n	80027de <__cvt+0x36>
 80027dc:	2303      	movs	r3, #3
 80027de:	aa07      	add	r2, sp, #28
 80027e0:	9204      	str	r2, [sp, #16]
 80027e2:	aa06      	add	r2, sp, #24
 80027e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80027e8:	e9cd 3500 	strd	r3, r5, [sp]
 80027ec:	4622      	mov	r2, r4
 80027ee:	4633      	mov	r3, r6
 80027f0:	f000 fcd2 	bl	8003198 <_dtoa_r>
 80027f4:	2f47      	cmp	r7, #71	; 0x47
 80027f6:	4680      	mov	r8, r0
 80027f8:	d102      	bne.n	8002800 <__cvt+0x58>
 80027fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027fc:	07db      	lsls	r3, r3, #31
 80027fe:	d526      	bpl.n	800284e <__cvt+0xa6>
 8002800:	2f46      	cmp	r7, #70	; 0x46
 8002802:	eb08 0905 	add.w	r9, r8, r5
 8002806:	d111      	bne.n	800282c <__cvt+0x84>
 8002808:	f898 3000 	ldrb.w	r3, [r8]
 800280c:	2b30      	cmp	r3, #48	; 0x30
 800280e:	d10a      	bne.n	8002826 <__cvt+0x7e>
 8002810:	2200      	movs	r2, #0
 8002812:	2300      	movs	r3, #0
 8002814:	4620      	mov	r0, r4
 8002816:	4631      	mov	r1, r6
 8002818:	f7fe f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800281c:	b918      	cbnz	r0, 8002826 <__cvt+0x7e>
 800281e:	f1c5 0501 	rsb	r5, r5, #1
 8002822:	f8ca 5000 	str.w	r5, [sl]
 8002826:	f8da 3000 	ldr.w	r3, [sl]
 800282a:	4499      	add	r9, r3
 800282c:	2200      	movs	r2, #0
 800282e:	2300      	movs	r3, #0
 8002830:	4620      	mov	r0, r4
 8002832:	4631      	mov	r1, r6
 8002834:	f7fe f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 8002838:	b938      	cbnz	r0, 800284a <__cvt+0xa2>
 800283a:	2230      	movs	r2, #48	; 0x30
 800283c:	9b07      	ldr	r3, [sp, #28]
 800283e:	454b      	cmp	r3, r9
 8002840:	d205      	bcs.n	800284e <__cvt+0xa6>
 8002842:	1c59      	adds	r1, r3, #1
 8002844:	9107      	str	r1, [sp, #28]
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e7f8      	b.n	800283c <__cvt+0x94>
 800284a:	f8cd 901c 	str.w	r9, [sp, #28]
 800284e:	4640      	mov	r0, r8
 8002850:	9b07      	ldr	r3, [sp, #28]
 8002852:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002854:	eba3 0308 	sub.w	r3, r3, r8
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	b008      	add	sp, #32
 800285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002860 <__exponent>:
 8002860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002862:	2900      	cmp	r1, #0
 8002864:	bfb4      	ite	lt
 8002866:	232d      	movlt	r3, #45	; 0x2d
 8002868:	232b      	movge	r3, #43	; 0x2b
 800286a:	4604      	mov	r4, r0
 800286c:	bfb8      	it	lt
 800286e:	4249      	neglt	r1, r1
 8002870:	2909      	cmp	r1, #9
 8002872:	f804 2b02 	strb.w	r2, [r4], #2
 8002876:	7043      	strb	r3, [r0, #1]
 8002878:	dd21      	ble.n	80028be <__exponent+0x5e>
 800287a:	f10d 0307 	add.w	r3, sp, #7
 800287e:	461f      	mov	r7, r3
 8002880:	260a      	movs	r6, #10
 8002882:	fb91 f5f6 	sdiv	r5, r1, r6
 8002886:	fb06 1115 	mls	r1, r6, r5, r1
 800288a:	2d09      	cmp	r5, #9
 800288c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002890:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002894:	f103 32ff 	add.w	r2, r3, #4294967295
 8002898:	4629      	mov	r1, r5
 800289a:	dc09      	bgt.n	80028b0 <__exponent+0x50>
 800289c:	3130      	adds	r1, #48	; 0x30
 800289e:	3b02      	subs	r3, #2
 80028a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80028a4:	42bb      	cmp	r3, r7
 80028a6:	4622      	mov	r2, r4
 80028a8:	d304      	bcc.n	80028b4 <__exponent+0x54>
 80028aa:	1a10      	subs	r0, r2, r0
 80028ac:	b003      	add	sp, #12
 80028ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b0:	4613      	mov	r3, r2
 80028b2:	e7e6      	b.n	8002882 <__exponent+0x22>
 80028b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b8:	f804 2b01 	strb.w	r2, [r4], #1
 80028bc:	e7f2      	b.n	80028a4 <__exponent+0x44>
 80028be:	2330      	movs	r3, #48	; 0x30
 80028c0:	4419      	add	r1, r3
 80028c2:	7083      	strb	r3, [r0, #2]
 80028c4:	1d02      	adds	r2, r0, #4
 80028c6:	70c1      	strb	r1, [r0, #3]
 80028c8:	e7ef      	b.n	80028aa <__exponent+0x4a>
	...

080028cc <_printf_float>:
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	b091      	sub	sp, #68	; 0x44
 80028d2:	460c      	mov	r4, r1
 80028d4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80028d6:	4693      	mov	fp, r2
 80028d8:	461e      	mov	r6, r3
 80028da:	4605      	mov	r5, r0
 80028dc:	f001 fada 	bl	8003e94 <_localeconv_r>
 80028e0:	6803      	ldr	r3, [r0, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	9309      	str	r3, [sp, #36]	; 0x24
 80028e6:	f7fd fc33 	bl	8000150 <strlen>
 80028ea:	2300      	movs	r3, #0
 80028ec:	930e      	str	r3, [sp, #56]	; 0x38
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	900a      	str	r0, [sp, #40]	; 0x28
 80028f2:	3307      	adds	r3, #7
 80028f4:	f023 0307 	bic.w	r3, r3, #7
 80028f8:	f103 0208 	add.w	r2, r3, #8
 80028fc:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002900:	f8d4 a000 	ldr.w	sl, [r4]
 8002904:	603a      	str	r2, [r7, #0]
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800290e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002916:	930b      	str	r3, [sp, #44]	; 0x2c
 8002918:	f04f 32ff 	mov.w	r2, #4294967295
 800291c:	4ba6      	ldr	r3, [pc, #664]	; (8002bb8 <_printf_float+0x2ec>)
 800291e:	4638      	mov	r0, r7
 8002920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002922:	f7fe f873 	bl	8000a0c <__aeabi_dcmpun>
 8002926:	bb68      	cbnz	r0, 8002984 <_printf_float+0xb8>
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	4ba2      	ldr	r3, [pc, #648]	; (8002bb8 <_printf_float+0x2ec>)
 800292e:	4638      	mov	r0, r7
 8002930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002932:	f7fe f84d 	bl	80009d0 <__aeabi_dcmple>
 8002936:	bb28      	cbnz	r0, 8002984 <_printf_float+0xb8>
 8002938:	2200      	movs	r2, #0
 800293a:	2300      	movs	r3, #0
 800293c:	4638      	mov	r0, r7
 800293e:	4649      	mov	r1, r9
 8002940:	f7fe f83c 	bl	80009bc <__aeabi_dcmplt>
 8002944:	b110      	cbz	r0, 800294c <_printf_float+0x80>
 8002946:	232d      	movs	r3, #45	; 0x2d
 8002948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800294c:	4f9b      	ldr	r7, [pc, #620]	; (8002bbc <_printf_float+0x2f0>)
 800294e:	4b9c      	ldr	r3, [pc, #624]	; (8002bc0 <_printf_float+0x2f4>)
 8002950:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002954:	bf98      	it	ls
 8002956:	461f      	movls	r7, r3
 8002958:	2303      	movs	r3, #3
 800295a:	f04f 0900 	mov.w	r9, #0
 800295e:	6123      	str	r3, [r4, #16]
 8002960:	f02a 0304 	bic.w	r3, sl, #4
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	9600      	str	r6, [sp, #0]
 8002968:	465b      	mov	r3, fp
 800296a:	aa0f      	add	r2, sp, #60	; 0x3c
 800296c:	4621      	mov	r1, r4
 800296e:	4628      	mov	r0, r5
 8002970:	f000 f9e2 	bl	8002d38 <_printf_common>
 8002974:	3001      	adds	r0, #1
 8002976:	f040 8090 	bne.w	8002a9a <_printf_float+0x1ce>
 800297a:	f04f 30ff 	mov.w	r0, #4294967295
 800297e:	b011      	add	sp, #68	; 0x44
 8002980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002984:	463a      	mov	r2, r7
 8002986:	464b      	mov	r3, r9
 8002988:	4638      	mov	r0, r7
 800298a:	4649      	mov	r1, r9
 800298c:	f7fe f83e 	bl	8000a0c <__aeabi_dcmpun>
 8002990:	b110      	cbz	r0, 8002998 <_printf_float+0xcc>
 8002992:	4f8c      	ldr	r7, [pc, #560]	; (8002bc4 <_printf_float+0x2f8>)
 8002994:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <_printf_float+0x2fc>)
 8002996:	e7db      	b.n	8002950 <_printf_float+0x84>
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	a80d      	add	r0, sp, #52	; 0x34
 80029a2:	a90e      	add	r1, sp, #56	; 0x38
 80029a4:	d140      	bne.n	8002a28 <_printf_float+0x15c>
 80029a6:	2306      	movs	r3, #6
 80029a8:	6063      	str	r3, [r4, #4]
 80029aa:	f04f 0c00 	mov.w	ip, #0
 80029ae:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80029b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80029b6:	6863      	ldr	r3, [r4, #4]
 80029b8:	6022      	str	r2, [r4, #0]
 80029ba:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	463a      	mov	r2, r7
 80029c2:	464b      	mov	r3, r9
 80029c4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80029c8:	4628      	mov	r0, r5
 80029ca:	f7ff feed 	bl	80027a8 <__cvt>
 80029ce:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80029d2:	2b47      	cmp	r3, #71	; 0x47
 80029d4:	4607      	mov	r7, r0
 80029d6:	d109      	bne.n	80029ec <_printf_float+0x120>
 80029d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029da:	1cd8      	adds	r0, r3, #3
 80029dc:	db02      	blt.n	80029e4 <_printf_float+0x118>
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	dd47      	ble.n	8002a74 <_printf_float+0x1a8>
 80029e4:	f1a8 0802 	sub.w	r8, r8, #2
 80029e8:	fa5f f888 	uxtb.w	r8, r8
 80029ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80029f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80029f2:	d824      	bhi.n	8002a3e <_printf_float+0x172>
 80029f4:	3901      	subs	r1, #1
 80029f6:	4642      	mov	r2, r8
 80029f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80029fc:	910d      	str	r1, [sp, #52]	; 0x34
 80029fe:	f7ff ff2f 	bl	8002860 <__exponent>
 8002a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a04:	4681      	mov	r9, r0
 8002a06:	1813      	adds	r3, r2, r0
 8002a08:	2a01      	cmp	r2, #1
 8002a0a:	6123      	str	r3, [r4, #16]
 8002a0c:	dc02      	bgt.n	8002a14 <_printf_float+0x148>
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	07d1      	lsls	r1, r2, #31
 8002a12:	d501      	bpl.n	8002a18 <_printf_float+0x14c>
 8002a14:	3301      	adds	r3, #1
 8002a16:	6123      	str	r3, [r4, #16]
 8002a18:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0a2      	beq.n	8002966 <_printf_float+0x9a>
 8002a20:	232d      	movs	r3, #45	; 0x2d
 8002a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a26:	e79e      	b.n	8002966 <_printf_float+0x9a>
 8002a28:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002a2c:	f000 816e 	beq.w	8002d0c <_printf_float+0x440>
 8002a30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002a34:	d1b9      	bne.n	80029aa <_printf_float+0xde>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1b7      	bne.n	80029aa <_printf_float+0xde>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e7b4      	b.n	80029a8 <_printf_float+0xdc>
 8002a3e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002a42:	d119      	bne.n	8002a78 <_printf_float+0x1ac>
 8002a44:	2900      	cmp	r1, #0
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	dd0c      	ble.n	8002a64 <_printf_float+0x198>
 8002a4a:	6121      	str	r1, [r4, #16]
 8002a4c:	b913      	cbnz	r3, 8002a54 <_printf_float+0x188>
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	07d2      	lsls	r2, r2, #31
 8002a52:	d502      	bpl.n	8002a5a <_printf_float+0x18e>
 8002a54:	3301      	adds	r3, #1
 8002a56:	440b      	add	r3, r1
 8002a58:	6123      	str	r3, [r4, #16]
 8002a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a5c:	f04f 0900 	mov.w	r9, #0
 8002a60:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a62:	e7d9      	b.n	8002a18 <_printf_float+0x14c>
 8002a64:	b913      	cbnz	r3, 8002a6c <_printf_float+0x1a0>
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	07d0      	lsls	r0, r2, #31
 8002a6a:	d501      	bpl.n	8002a70 <_printf_float+0x1a4>
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	e7f3      	b.n	8002a58 <_printf_float+0x18c>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e7f1      	b.n	8002a58 <_printf_float+0x18c>
 8002a74:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002a78:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	db05      	blt.n	8002a8c <_printf_float+0x1c0>
 8002a80:	6822      	ldr	r2, [r4, #0]
 8002a82:	6123      	str	r3, [r4, #16]
 8002a84:	07d1      	lsls	r1, r2, #31
 8002a86:	d5e8      	bpl.n	8002a5a <_printf_float+0x18e>
 8002a88:	3301      	adds	r3, #1
 8002a8a:	e7e5      	b.n	8002a58 <_printf_float+0x18c>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfcc      	ite	gt
 8002a90:	2301      	movgt	r3, #1
 8002a92:	f1c3 0302 	rsble	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	e7de      	b.n	8002a58 <_printf_float+0x18c>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	055a      	lsls	r2, r3, #21
 8002a9e:	d407      	bmi.n	8002ab0 <_printf_float+0x1e4>
 8002aa0:	6923      	ldr	r3, [r4, #16]
 8002aa2:	463a      	mov	r2, r7
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	47b0      	blx	r6
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d129      	bne.n	8002b02 <_printf_float+0x236>
 8002aae:	e764      	b.n	800297a <_printf_float+0xae>
 8002ab0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002ab4:	f240 80d7 	bls.w	8002c66 <_printf_float+0x39a>
 8002ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002abc:	2200      	movs	r2, #0
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f7fd ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8002ac4:	b388      	cbz	r0, 8002b2a <_printf_float+0x25e>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <_printf_float+0x300>)
 8002aca:	4659      	mov	r1, fp
 8002acc:	4628      	mov	r0, r5
 8002ace:	47b0      	blx	r6
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	f43f af52 	beq.w	800297a <_printf_float+0xae>
 8002ad6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ada:	429a      	cmp	r2, r3
 8002adc:	db02      	blt.n	8002ae4 <_printf_float+0x218>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	07d8      	lsls	r0, r3, #31
 8002ae2:	d50e      	bpl.n	8002b02 <_printf_float+0x236>
 8002ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ae8:	4659      	mov	r1, fp
 8002aea:	4628      	mov	r0, r5
 8002aec:	47b0      	blx	r6
 8002aee:	3001      	adds	r0, #1
 8002af0:	f43f af43 	beq.w	800297a <_printf_float+0xae>
 8002af4:	2700      	movs	r7, #0
 8002af6:	f104 081a 	add.w	r8, r4, #26
 8002afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002afc:	3b01      	subs	r3, #1
 8002afe:	42bb      	cmp	r3, r7
 8002b00:	dc09      	bgt.n	8002b16 <_printf_float+0x24a>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	079f      	lsls	r7, r3, #30
 8002b06:	f100 80fd 	bmi.w	8002d04 <_printf_float+0x438>
 8002b0a:	68e0      	ldr	r0, [r4, #12]
 8002b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b0e:	4298      	cmp	r0, r3
 8002b10:	bfb8      	it	lt
 8002b12:	4618      	movlt	r0, r3
 8002b14:	e733      	b.n	800297e <_printf_float+0xb2>
 8002b16:	2301      	movs	r3, #1
 8002b18:	4642      	mov	r2, r8
 8002b1a:	4659      	mov	r1, fp
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	47b0      	blx	r6
 8002b20:	3001      	adds	r0, #1
 8002b22:	f43f af2a 	beq.w	800297a <_printf_float+0xae>
 8002b26:	3701      	adds	r7, #1
 8002b28:	e7e7      	b.n	8002afa <_printf_float+0x22e>
 8002b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	dc2b      	bgt.n	8002b88 <_printf_float+0x2bc>
 8002b30:	2301      	movs	r3, #1
 8002b32:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <_printf_float+0x300>)
 8002b34:	4659      	mov	r1, fp
 8002b36:	4628      	mov	r0, r5
 8002b38:	47b0      	blx	r6
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	f43f af1d 	beq.w	800297a <_printf_float+0xae>
 8002b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b42:	b923      	cbnz	r3, 8002b4e <_printf_float+0x282>
 8002b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b46:	b913      	cbnz	r3, 8002b4e <_printf_float+0x282>
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	07d9      	lsls	r1, r3, #31
 8002b4c:	d5d9      	bpl.n	8002b02 <_printf_float+0x236>
 8002b4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b52:	4659      	mov	r1, fp
 8002b54:	4628      	mov	r0, r5
 8002b56:	47b0      	blx	r6
 8002b58:	3001      	adds	r0, #1
 8002b5a:	f43f af0e 	beq.w	800297a <_printf_float+0xae>
 8002b5e:	f04f 0800 	mov.w	r8, #0
 8002b62:	f104 091a 	add.w	r9, r4, #26
 8002b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b68:	425b      	negs	r3, r3
 8002b6a:	4543      	cmp	r3, r8
 8002b6c:	dc01      	bgt.n	8002b72 <_printf_float+0x2a6>
 8002b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b70:	e797      	b.n	8002aa2 <_printf_float+0x1d6>
 8002b72:	2301      	movs	r3, #1
 8002b74:	464a      	mov	r2, r9
 8002b76:	4659      	mov	r1, fp
 8002b78:	4628      	mov	r0, r5
 8002b7a:	47b0      	blx	r6
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	f43f aefc 	beq.w	800297a <_printf_float+0xae>
 8002b82:	f108 0801 	add.w	r8, r8, #1
 8002b86:	e7ee      	b.n	8002b66 <_printf_float+0x29a>
 8002b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	bfa8      	it	ge
 8002b90:	461a      	movge	r2, r3
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	4690      	mov	r8, r2
 8002b96:	dd07      	ble.n	8002ba8 <_printf_float+0x2dc>
 8002b98:	4613      	mov	r3, r2
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	463a      	mov	r2, r7
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	47b0      	blx	r6
 8002ba2:	3001      	adds	r0, #1
 8002ba4:	f43f aee9 	beq.w	800297a <_printf_float+0xae>
 8002ba8:	f104 031a 	add.w	r3, r4, #26
 8002bac:	f04f 0a00 	mov.w	sl, #0
 8002bb0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bb6:	e015      	b.n	8002be4 <_printf_float+0x318>
 8002bb8:	7fefffff 	.word	0x7fefffff
 8002bbc:	08004e70 	.word	0x08004e70
 8002bc0:	08004e6c 	.word	0x08004e6c
 8002bc4:	08004e78 	.word	0x08004e78
 8002bc8:	08004e74 	.word	0x08004e74
 8002bcc:	08004e7c 	.word	0x08004e7c
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	47b0      	blx	r6
 8002bda:	3001      	adds	r0, #1
 8002bdc:	f43f aecd 	beq.w	800297a <_printf_float+0xae>
 8002be0:	f10a 0a01 	add.w	sl, sl, #1
 8002be4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002be8:	eba9 0308 	sub.w	r3, r9, r8
 8002bec:	4553      	cmp	r3, sl
 8002bee:	dcef      	bgt.n	8002bd0 <_printf_float+0x304>
 8002bf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	444f      	add	r7, r9
 8002bf8:	db14      	blt.n	8002c24 <_printf_float+0x358>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	07da      	lsls	r2, r3, #31
 8002bfe:	d411      	bmi.n	8002c24 <_printf_float+0x358>
 8002c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c04:	eba3 0209 	sub.w	r2, r3, r9
 8002c08:	eba3 0901 	sub.w	r9, r3, r1
 8002c0c:	4591      	cmp	r9, r2
 8002c0e:	bfa8      	it	ge
 8002c10:	4691      	movge	r9, r2
 8002c12:	f1b9 0f00 	cmp.w	r9, #0
 8002c16:	dc0d      	bgt.n	8002c34 <_printf_float+0x368>
 8002c18:	2700      	movs	r7, #0
 8002c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c1e:	f104 081a 	add.w	r8, r4, #26
 8002c22:	e018      	b.n	8002c56 <_printf_float+0x38a>
 8002c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c28:	4659      	mov	r1, fp
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	47b0      	blx	r6
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d1e6      	bne.n	8002c00 <_printf_float+0x334>
 8002c32:	e6a2      	b.n	800297a <_printf_float+0xae>
 8002c34:	464b      	mov	r3, r9
 8002c36:	463a      	mov	r2, r7
 8002c38:	4659      	mov	r1, fp
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	47b0      	blx	r6
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d1ea      	bne.n	8002c18 <_printf_float+0x34c>
 8002c42:	e69a      	b.n	800297a <_printf_float+0xae>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4642      	mov	r2, r8
 8002c48:	4659      	mov	r1, fp
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	47b0      	blx	r6
 8002c4e:	3001      	adds	r0, #1
 8002c50:	f43f ae93 	beq.w	800297a <_printf_float+0xae>
 8002c54:	3701      	adds	r7, #1
 8002c56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	eba3 0309 	sub.w	r3, r3, r9
 8002c60:	42bb      	cmp	r3, r7
 8002c62:	dcef      	bgt.n	8002c44 <_printf_float+0x378>
 8002c64:	e74d      	b.n	8002b02 <_printf_float+0x236>
 8002c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c68:	2a01      	cmp	r2, #1
 8002c6a:	dc01      	bgt.n	8002c70 <_printf_float+0x3a4>
 8002c6c:	07db      	lsls	r3, r3, #31
 8002c6e:	d538      	bpl.n	8002ce2 <_printf_float+0x416>
 8002c70:	2301      	movs	r3, #1
 8002c72:	463a      	mov	r2, r7
 8002c74:	4659      	mov	r1, fp
 8002c76:	4628      	mov	r0, r5
 8002c78:	47b0      	blx	r6
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	f43f ae7d 	beq.w	800297a <_printf_float+0xae>
 8002c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c84:	4659      	mov	r1, fp
 8002c86:	4628      	mov	r0, r5
 8002c88:	47b0      	blx	r6
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	f107 0701 	add.w	r7, r7, #1
 8002c90:	f43f ae73 	beq.w	800297a <_printf_float+0xae>
 8002c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f7fd fe81 	bl	80009a8 <__aeabi_dcmpeq>
 8002ca6:	b9c0      	cbnz	r0, 8002cda <_printf_float+0x40e>
 8002ca8:	4643      	mov	r3, r8
 8002caa:	463a      	mov	r2, r7
 8002cac:	4659      	mov	r1, fp
 8002cae:	4628      	mov	r0, r5
 8002cb0:	47b0      	blx	r6
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d10d      	bne.n	8002cd2 <_printf_float+0x406>
 8002cb6:	e660      	b.n	800297a <_printf_float+0xae>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	4642      	mov	r2, r8
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	47b0      	blx	r6
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	f43f ae59 	beq.w	800297a <_printf_float+0xae>
 8002cc8:	3701      	adds	r7, #1
 8002cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	42bb      	cmp	r3, r7
 8002cd0:	dcf2      	bgt.n	8002cb8 <_printf_float+0x3ec>
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002cd8:	e6e4      	b.n	8002aa4 <_printf_float+0x1d8>
 8002cda:	2700      	movs	r7, #0
 8002cdc:	f104 081a 	add.w	r8, r4, #26
 8002ce0:	e7f3      	b.n	8002cca <_printf_float+0x3fe>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e7e1      	b.n	8002caa <_printf_float+0x3de>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4642      	mov	r2, r8
 8002cea:	4659      	mov	r1, fp
 8002cec:	4628      	mov	r0, r5
 8002cee:	47b0      	blx	r6
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	f43f ae42 	beq.w	800297a <_printf_float+0xae>
 8002cf6:	3701      	adds	r7, #1
 8002cf8:	68e3      	ldr	r3, [r4, #12]
 8002cfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	42bb      	cmp	r3, r7
 8002d00:	dcf1      	bgt.n	8002ce6 <_printf_float+0x41a>
 8002d02:	e702      	b.n	8002b0a <_printf_float+0x23e>
 8002d04:	2700      	movs	r7, #0
 8002d06:	f104 0819 	add.w	r8, r4, #25
 8002d0a:	e7f5      	b.n	8002cf8 <_printf_float+0x42c>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f43f ae94 	beq.w	8002a3a <_printf_float+0x16e>
 8002d12:	f04f 0c00 	mov.w	ip, #0
 8002d16:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002d1a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002d1e:	6022      	str	r2, [r4, #0]
 8002d20:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002d24:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	463a      	mov	r2, r7
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f7ff fd3a 	bl	80027a8 <__cvt>
 8002d34:	4607      	mov	r7, r0
 8002d36:	e64f      	b.n	80029d8 <_printf_float+0x10c>

08002d38 <_printf_common>:
 8002d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d3c:	4691      	mov	r9, r2
 8002d3e:	461f      	mov	r7, r3
 8002d40:	688a      	ldr	r2, [r1, #8]
 8002d42:	690b      	ldr	r3, [r1, #16]
 8002d44:	4606      	mov	r6, r0
 8002d46:	4293      	cmp	r3, r2
 8002d48:	bfb8      	it	lt
 8002d4a:	4613      	movlt	r3, r2
 8002d4c:	f8c9 3000 	str.w	r3, [r9]
 8002d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d54:	460c      	mov	r4, r1
 8002d56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d5a:	b112      	cbz	r2, 8002d62 <_printf_common+0x2a>
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f8c9 3000 	str.w	r3, [r9]
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	0699      	lsls	r1, r3, #26
 8002d66:	bf42      	ittt	mi
 8002d68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d6c:	3302      	addmi	r3, #2
 8002d6e:	f8c9 3000 	strmi.w	r3, [r9]
 8002d72:	6825      	ldr	r5, [r4, #0]
 8002d74:	f015 0506 	ands.w	r5, r5, #6
 8002d78:	d107      	bne.n	8002d8a <_printf_common+0x52>
 8002d7a:	f104 0a19 	add.w	sl, r4, #25
 8002d7e:	68e3      	ldr	r3, [r4, #12]
 8002d80:	f8d9 2000 	ldr.w	r2, [r9]
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	42ab      	cmp	r3, r5
 8002d88:	dc29      	bgt.n	8002dde <_printf_common+0xa6>
 8002d8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	3300      	adds	r3, #0
 8002d92:	bf18      	it	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	0692      	lsls	r2, r2, #26
 8002d98:	d42e      	bmi.n	8002df8 <_printf_common+0xc0>
 8002d9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d9e:	4639      	mov	r1, r7
 8002da0:	4630      	mov	r0, r6
 8002da2:	47c0      	blx	r8
 8002da4:	3001      	adds	r0, #1
 8002da6:	d021      	beq.n	8002dec <_printf_common+0xb4>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	68e5      	ldr	r5, [r4, #12]
 8002dac:	f003 0306 	and.w	r3, r3, #6
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	bf18      	it	ne
 8002db4:	2500      	movne	r5, #0
 8002db6:	f8d9 2000 	ldr.w	r2, [r9]
 8002dba:	f04f 0900 	mov.w	r9, #0
 8002dbe:	bf08      	it	eq
 8002dc0:	1aad      	subeq	r5, r5, r2
 8002dc2:	68a3      	ldr	r3, [r4, #8]
 8002dc4:	6922      	ldr	r2, [r4, #16]
 8002dc6:	bf08      	it	eq
 8002dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bfc4      	itt	gt
 8002dd0:	1a9b      	subgt	r3, r3, r2
 8002dd2:	18ed      	addgt	r5, r5, r3
 8002dd4:	341a      	adds	r4, #26
 8002dd6:	454d      	cmp	r5, r9
 8002dd8:	d11a      	bne.n	8002e10 <_printf_common+0xd8>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e008      	b.n	8002df0 <_printf_common+0xb8>
 8002dde:	2301      	movs	r3, #1
 8002de0:	4652      	mov	r2, sl
 8002de2:	4639      	mov	r1, r7
 8002de4:	4630      	mov	r0, r6
 8002de6:	47c0      	blx	r8
 8002de8:	3001      	adds	r0, #1
 8002dea:	d103      	bne.n	8002df4 <_printf_common+0xbc>
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df4:	3501      	adds	r5, #1
 8002df6:	e7c2      	b.n	8002d7e <_printf_common+0x46>
 8002df8:	2030      	movs	r0, #48	; 0x30
 8002dfa:	18e1      	adds	r1, r4, r3
 8002dfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e06:	4422      	add	r2, r4
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e0e:	e7c4      	b.n	8002d9a <_printf_common+0x62>
 8002e10:	2301      	movs	r3, #1
 8002e12:	4622      	mov	r2, r4
 8002e14:	4639      	mov	r1, r7
 8002e16:	4630      	mov	r0, r6
 8002e18:	47c0      	blx	r8
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d0e6      	beq.n	8002dec <_printf_common+0xb4>
 8002e1e:	f109 0901 	add.w	r9, r9, #1
 8002e22:	e7d8      	b.n	8002dd6 <_printf_common+0x9e>

08002e24 <_printf_i>:
 8002e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	7e09      	ldrb	r1, [r1, #24]
 8002e30:	b085      	sub	sp, #20
 8002e32:	296e      	cmp	r1, #110	; 0x6e
 8002e34:	4617      	mov	r7, r2
 8002e36:	4606      	mov	r6, r0
 8002e38:	4698      	mov	r8, r3
 8002e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e3c:	f000 80b3 	beq.w	8002fa6 <_printf_i+0x182>
 8002e40:	d822      	bhi.n	8002e88 <_printf_i+0x64>
 8002e42:	2963      	cmp	r1, #99	; 0x63
 8002e44:	d036      	beq.n	8002eb4 <_printf_i+0x90>
 8002e46:	d80a      	bhi.n	8002e5e <_printf_i+0x3a>
 8002e48:	2900      	cmp	r1, #0
 8002e4a:	f000 80b9 	beq.w	8002fc0 <_printf_i+0x19c>
 8002e4e:	2958      	cmp	r1, #88	; 0x58
 8002e50:	f000 8083 	beq.w	8002f5a <_printf_i+0x136>
 8002e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002e5c:	e032      	b.n	8002ec4 <_printf_i+0xa0>
 8002e5e:	2964      	cmp	r1, #100	; 0x64
 8002e60:	d001      	beq.n	8002e66 <_printf_i+0x42>
 8002e62:	2969      	cmp	r1, #105	; 0x69
 8002e64:	d1f6      	bne.n	8002e54 <_printf_i+0x30>
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	0605      	lsls	r5, r0, #24
 8002e6c:	f103 0104 	add.w	r1, r3, #4
 8002e70:	d52a      	bpl.n	8002ec8 <_printf_i+0xa4>
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da03      	bge.n	8002e82 <_printf_i+0x5e>
 8002e7a:	222d      	movs	r2, #45	; 0x2d
 8002e7c:	425b      	negs	r3, r3
 8002e7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e82:	486f      	ldr	r0, [pc, #444]	; (8003040 <_printf_i+0x21c>)
 8002e84:	220a      	movs	r2, #10
 8002e86:	e039      	b.n	8002efc <_printf_i+0xd8>
 8002e88:	2973      	cmp	r1, #115	; 0x73
 8002e8a:	f000 809d 	beq.w	8002fc8 <_printf_i+0x1a4>
 8002e8e:	d808      	bhi.n	8002ea2 <_printf_i+0x7e>
 8002e90:	296f      	cmp	r1, #111	; 0x6f
 8002e92:	d020      	beq.n	8002ed6 <_printf_i+0xb2>
 8002e94:	2970      	cmp	r1, #112	; 0x70
 8002e96:	d1dd      	bne.n	8002e54 <_printf_i+0x30>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	e003      	b.n	8002eaa <_printf_i+0x86>
 8002ea2:	2975      	cmp	r1, #117	; 0x75
 8002ea4:	d017      	beq.n	8002ed6 <_printf_i+0xb2>
 8002ea6:	2978      	cmp	r1, #120	; 0x78
 8002ea8:	d1d4      	bne.n	8002e54 <_printf_i+0x30>
 8002eaa:	2378      	movs	r3, #120	; 0x78
 8002eac:	4865      	ldr	r0, [pc, #404]	; (8003044 <_printf_i+0x220>)
 8002eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eb2:	e055      	b.n	8002f60 <_printf_i+0x13c>
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002eba:	1d19      	adds	r1, r3, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6011      	str	r1, [r2, #0]
 8002ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e08c      	b.n	8002fe2 <_printf_i+0x1be>
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ece:	6011      	str	r1, [r2, #0]
 8002ed0:	bf18      	it	ne
 8002ed2:	b21b      	sxthne	r3, r3
 8002ed4:	e7cf      	b.n	8002e76 <_printf_i+0x52>
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	6825      	ldr	r5, [r4, #0]
 8002eda:	1d18      	adds	r0, r3, #4
 8002edc:	6010      	str	r0, [r2, #0]
 8002ede:	0628      	lsls	r0, r5, #24
 8002ee0:	d501      	bpl.n	8002ee6 <_printf_i+0xc2>
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	e002      	b.n	8002eec <_printf_i+0xc8>
 8002ee6:	0668      	lsls	r0, r5, #25
 8002ee8:	d5fb      	bpl.n	8002ee2 <_printf_i+0xbe>
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	296f      	cmp	r1, #111	; 0x6f
 8002eee:	bf14      	ite	ne
 8002ef0:	220a      	movne	r2, #10
 8002ef2:	2208      	moveq	r2, #8
 8002ef4:	4852      	ldr	r0, [pc, #328]	; (8003040 <_printf_i+0x21c>)
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002efc:	6865      	ldr	r5, [r4, #4]
 8002efe:	2d00      	cmp	r5, #0
 8002f00:	60a5      	str	r5, [r4, #8]
 8002f02:	f2c0 8095 	blt.w	8003030 <_printf_i+0x20c>
 8002f06:	6821      	ldr	r1, [r4, #0]
 8002f08:	f021 0104 	bic.w	r1, r1, #4
 8002f0c:	6021      	str	r1, [r4, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d13d      	bne.n	8002f8e <_printf_i+0x16a>
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	f040 808e 	bne.w	8003034 <_printf_i+0x210>
 8002f18:	4665      	mov	r5, ip
 8002f1a:	2a08      	cmp	r2, #8
 8002f1c:	d10b      	bne.n	8002f36 <_printf_i+0x112>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d508      	bpl.n	8002f36 <_printf_i+0x112>
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bfde      	ittt	le
 8002f2c:	2330      	movle	r3, #48	; 0x30
 8002f2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f36:	ebac 0305 	sub.w	r3, ip, r5
 8002f3a:	6123      	str	r3, [r4, #16]
 8002f3c:	f8cd 8000 	str.w	r8, [sp]
 8002f40:	463b      	mov	r3, r7
 8002f42:	aa03      	add	r2, sp, #12
 8002f44:	4621      	mov	r1, r4
 8002f46:	4630      	mov	r0, r6
 8002f48:	f7ff fef6 	bl	8002d38 <_printf_common>
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d14d      	bne.n	8002fec <_printf_i+0x1c8>
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	b005      	add	sp, #20
 8002f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f5a:	4839      	ldr	r0, [pc, #228]	; (8003040 <_printf_i+0x21c>)
 8002f5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	6821      	ldr	r1, [r4, #0]
 8002f64:	1d1d      	adds	r5, r3, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6015      	str	r5, [r2, #0]
 8002f6a:	060a      	lsls	r2, r1, #24
 8002f6c:	d50b      	bpl.n	8002f86 <_printf_i+0x162>
 8002f6e:	07ca      	lsls	r2, r1, #31
 8002f70:	bf44      	itt	mi
 8002f72:	f041 0120 	orrmi.w	r1, r1, #32
 8002f76:	6021      	strmi	r1, [r4, #0]
 8002f78:	b91b      	cbnz	r3, 8002f82 <_printf_i+0x15e>
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	f022 0220 	bic.w	r2, r2, #32
 8002f80:	6022      	str	r2, [r4, #0]
 8002f82:	2210      	movs	r2, #16
 8002f84:	e7b7      	b.n	8002ef6 <_printf_i+0xd2>
 8002f86:	064d      	lsls	r5, r1, #25
 8002f88:	bf48      	it	mi
 8002f8a:	b29b      	uxthmi	r3, r3
 8002f8c:	e7ef      	b.n	8002f6e <_printf_i+0x14a>
 8002f8e:	4665      	mov	r5, ip
 8002f90:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f94:	fb02 3311 	mls	r3, r2, r1, r3
 8002f98:	5cc3      	ldrb	r3, [r0, r3]
 8002f9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d1f5      	bne.n	8002f90 <_printf_i+0x16c>
 8002fa4:	e7b9      	b.n	8002f1a <_printf_i+0xf6>
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	6825      	ldr	r5, [r4, #0]
 8002faa:	1d18      	adds	r0, r3, #4
 8002fac:	6961      	ldr	r1, [r4, #20]
 8002fae:	6010      	str	r0, [r2, #0]
 8002fb0:	0628      	lsls	r0, r5, #24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	d501      	bpl.n	8002fba <_printf_i+0x196>
 8002fb6:	6019      	str	r1, [r3, #0]
 8002fb8:	e002      	b.n	8002fc0 <_printf_i+0x19c>
 8002fba:	066a      	lsls	r2, r5, #25
 8002fbc:	d5fb      	bpl.n	8002fb6 <_printf_i+0x192>
 8002fbe:	8019      	strh	r1, [r3, #0]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4665      	mov	r5, ip
 8002fc4:	6123      	str	r3, [r4, #16]
 8002fc6:	e7b9      	b.n	8002f3c <_printf_i+0x118>
 8002fc8:	6813      	ldr	r3, [r2, #0]
 8002fca:	1d19      	adds	r1, r3, #4
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	681d      	ldr	r5, [r3, #0]
 8002fd0:	6862      	ldr	r2, [r4, #4]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f000 ff73 	bl	8003ec0 <memchr>
 8002fda:	b108      	cbz	r0, 8002fe0 <_printf_i+0x1bc>
 8002fdc:	1b40      	subs	r0, r0, r5
 8002fde:	6060      	str	r0, [r4, #4]
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	6123      	str	r3, [r4, #16]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fea:	e7a7      	b.n	8002f3c <_printf_i+0x118>
 8002fec:	6923      	ldr	r3, [r4, #16]
 8002fee:	462a      	mov	r2, r5
 8002ff0:	4639      	mov	r1, r7
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	47c0      	blx	r8
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d0aa      	beq.n	8002f50 <_printf_i+0x12c>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	079b      	lsls	r3, r3, #30
 8002ffe:	d413      	bmi.n	8003028 <_printf_i+0x204>
 8003000:	68e0      	ldr	r0, [r4, #12]
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	4298      	cmp	r0, r3
 8003006:	bfb8      	it	lt
 8003008:	4618      	movlt	r0, r3
 800300a:	e7a3      	b.n	8002f54 <_printf_i+0x130>
 800300c:	2301      	movs	r3, #1
 800300e:	464a      	mov	r2, r9
 8003010:	4639      	mov	r1, r7
 8003012:	4630      	mov	r0, r6
 8003014:	47c0      	blx	r8
 8003016:	3001      	adds	r0, #1
 8003018:	d09a      	beq.n	8002f50 <_printf_i+0x12c>
 800301a:	3501      	adds	r5, #1
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	9a03      	ldr	r2, [sp, #12]
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	42ab      	cmp	r3, r5
 8003024:	dcf2      	bgt.n	800300c <_printf_i+0x1e8>
 8003026:	e7eb      	b.n	8003000 <_printf_i+0x1dc>
 8003028:	2500      	movs	r5, #0
 800302a:	f104 0919 	add.w	r9, r4, #25
 800302e:	e7f5      	b.n	800301c <_printf_i+0x1f8>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ac      	bne.n	8002f8e <_printf_i+0x16a>
 8003034:	7803      	ldrb	r3, [r0, #0]
 8003036:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800303e:	e76c      	b.n	8002f1a <_printf_i+0xf6>
 8003040:	08004e7e 	.word	0x08004e7e
 8003044:	08004e8f 	.word	0x08004e8f

08003048 <iprintf>:
 8003048:	b40f      	push	{r0, r1, r2, r3}
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <iprintf+0x2c>)
 800304c:	b513      	push	{r0, r1, r4, lr}
 800304e:	681c      	ldr	r4, [r3, #0]
 8003050:	b124      	cbz	r4, 800305c <iprintf+0x14>
 8003052:	69a3      	ldr	r3, [r4, #24]
 8003054:	b913      	cbnz	r3, 800305c <iprintf+0x14>
 8003056:	4620      	mov	r0, r4
 8003058:	f000 fe92 	bl	8003d80 <__sinit>
 800305c:	ab05      	add	r3, sp, #20
 800305e:	9a04      	ldr	r2, [sp, #16]
 8003060:	68a1      	ldr	r1, [r4, #8]
 8003062:	4620      	mov	r0, r4
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	f001 fafd 	bl	8004664 <_vfiprintf_r>
 800306a:	b002      	add	sp, #8
 800306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003070:	b004      	add	sp, #16
 8003072:	4770      	bx	lr
 8003074:	20000014 	.word	0x20000014

08003078 <quorem>:
 8003078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307c:	6903      	ldr	r3, [r0, #16]
 800307e:	690c      	ldr	r4, [r1, #16]
 8003080:	4680      	mov	r8, r0
 8003082:	42a3      	cmp	r3, r4
 8003084:	f2c0 8084 	blt.w	8003190 <quorem+0x118>
 8003088:	3c01      	subs	r4, #1
 800308a:	f101 0714 	add.w	r7, r1, #20
 800308e:	f100 0614 	add.w	r6, r0, #20
 8003092:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003096:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800309a:	3501      	adds	r5, #1
 800309c:	fbb0 f5f5 	udiv	r5, r0, r5
 80030a0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80030a4:	eb06 030c 	add.w	r3, r6, ip
 80030a8:	eb07 090c 	add.w	r9, r7, ip
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	b39d      	cbz	r5, 8003118 <quorem+0xa0>
 80030b0:	f04f 0a00 	mov.w	sl, #0
 80030b4:	4638      	mov	r0, r7
 80030b6:	46b6      	mov	lr, r6
 80030b8:	46d3      	mov	fp, sl
 80030ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80030be:	b293      	uxth	r3, r2
 80030c0:	fb05 a303 	mla	r3, r5, r3, sl
 80030c4:	0c12      	lsrs	r2, r2, #16
 80030c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80030ca:	fb05 a202 	mla	r2, r5, r2, sl
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	ebab 0303 	sub.w	r3, fp, r3
 80030d4:	f8de b000 	ldr.w	fp, [lr]
 80030d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80030dc:	fa1f fb8b 	uxth.w	fp, fp
 80030e0:	445b      	add	r3, fp
 80030e2:	fa1f fb82 	uxth.w	fp, r2
 80030e6:	f8de 2000 	ldr.w	r2, [lr]
 80030ea:	4581      	cmp	r9, r0
 80030ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80030f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030fa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80030fe:	f84e 3b04 	str.w	r3, [lr], #4
 8003102:	d2da      	bcs.n	80030ba <quorem+0x42>
 8003104:	f856 300c 	ldr.w	r3, [r6, ip]
 8003108:	b933      	cbnz	r3, 8003118 <quorem+0xa0>
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	3b04      	subs	r3, #4
 800310e:	429e      	cmp	r6, r3
 8003110:	461a      	mov	r2, r3
 8003112:	d331      	bcc.n	8003178 <quorem+0x100>
 8003114:	f8c8 4010 	str.w	r4, [r8, #16]
 8003118:	4640      	mov	r0, r8
 800311a:	f001 f8ff 	bl	800431c <__mcmp>
 800311e:	2800      	cmp	r0, #0
 8003120:	db26      	blt.n	8003170 <quorem+0xf8>
 8003122:	4630      	mov	r0, r6
 8003124:	f04f 0c00 	mov.w	ip, #0
 8003128:	3501      	adds	r5, #1
 800312a:	f857 1b04 	ldr.w	r1, [r7], #4
 800312e:	f8d0 e000 	ldr.w	lr, [r0]
 8003132:	b28b      	uxth	r3, r1
 8003134:	ebac 0303 	sub.w	r3, ip, r3
 8003138:	fa1f f28e 	uxth.w	r2, lr
 800313c:	4413      	add	r3, r2
 800313e:	0c0a      	lsrs	r2, r1, #16
 8003140:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003148:	b29b      	uxth	r3, r3
 800314a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800314e:	45b9      	cmp	r9, r7
 8003150:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003154:	f840 3b04 	str.w	r3, [r0], #4
 8003158:	d2e7      	bcs.n	800312a <quorem+0xb2>
 800315a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800315e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003162:	b92a      	cbnz	r2, 8003170 <quorem+0xf8>
 8003164:	3b04      	subs	r3, #4
 8003166:	429e      	cmp	r6, r3
 8003168:	461a      	mov	r2, r3
 800316a:	d30b      	bcc.n	8003184 <quorem+0x10c>
 800316c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003170:	4628      	mov	r0, r5
 8003172:	b003      	add	sp, #12
 8003174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	3b04      	subs	r3, #4
 800317c:	2a00      	cmp	r2, #0
 800317e:	d1c9      	bne.n	8003114 <quorem+0x9c>
 8003180:	3c01      	subs	r4, #1
 8003182:	e7c4      	b.n	800310e <quorem+0x96>
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	3b04      	subs	r3, #4
 8003188:	2a00      	cmp	r2, #0
 800318a:	d1ef      	bne.n	800316c <quorem+0xf4>
 800318c:	3c01      	subs	r4, #1
 800318e:	e7ea      	b.n	8003166 <quorem+0xee>
 8003190:	2000      	movs	r0, #0
 8003192:	e7ee      	b.n	8003172 <quorem+0xfa>
 8003194:	0000      	movs	r0, r0
	...

08003198 <_dtoa_r>:
 8003198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319c:	4616      	mov	r6, r2
 800319e:	461f      	mov	r7, r3
 80031a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80031a2:	b095      	sub	sp, #84	; 0x54
 80031a4:	4604      	mov	r4, r0
 80031a6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80031aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80031ae:	b93d      	cbnz	r5, 80031c0 <_dtoa_r+0x28>
 80031b0:	2010      	movs	r0, #16
 80031b2:	f000 fe7d 	bl	8003eb0 <malloc>
 80031b6:	6260      	str	r0, [r4, #36]	; 0x24
 80031b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80031bc:	6005      	str	r5, [r0, #0]
 80031be:	60c5      	str	r5, [r0, #12]
 80031c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	b151      	cbz	r1, 80031dc <_dtoa_r+0x44>
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	2301      	movs	r3, #1
 80031ca:	4093      	lsls	r3, r2
 80031cc:	604a      	str	r2, [r1, #4]
 80031ce:	608b      	str	r3, [r1, #8]
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 fec2 	bl	8003f5a <_Bfree>
 80031d6:	2200      	movs	r2, #0
 80031d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	1e3b      	subs	r3, r7, #0
 80031de:	bfaf      	iteee	ge
 80031e0:	2300      	movge	r3, #0
 80031e2:	2201      	movlt	r2, #1
 80031e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80031e8:	9303      	strlt	r3, [sp, #12]
 80031ea:	bfac      	ite	ge
 80031ec:	f8c8 3000 	strge.w	r3, [r8]
 80031f0:	f8c8 2000 	strlt.w	r2, [r8]
 80031f4:	4bae      	ldr	r3, [pc, #696]	; (80034b0 <_dtoa_r+0x318>)
 80031f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80031fa:	ea33 0308 	bics.w	r3, r3, r8
 80031fe:	d11b      	bne.n	8003238 <_dtoa_r+0xa0>
 8003200:	f242 730f 	movw	r3, #9999	; 0x270f
 8003204:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	9b02      	ldr	r3, [sp, #8]
 800320a:	b923      	cbnz	r3, 8003216 <_dtoa_r+0x7e>
 800320c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003210:	2800      	cmp	r0, #0
 8003212:	f000 8545 	beq.w	8003ca0 <_dtoa_r+0xb08>
 8003216:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003218:	b953      	cbnz	r3, 8003230 <_dtoa_r+0x98>
 800321a:	4ba6      	ldr	r3, [pc, #664]	; (80034b4 <_dtoa_r+0x31c>)
 800321c:	e021      	b.n	8003262 <_dtoa_r+0xca>
 800321e:	4ba6      	ldr	r3, [pc, #664]	; (80034b8 <_dtoa_r+0x320>)
 8003220:	9306      	str	r3, [sp, #24]
 8003222:	3308      	adds	r3, #8
 8003224:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	9806      	ldr	r0, [sp, #24]
 800322a:	b015      	add	sp, #84	; 0x54
 800322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003230:	4ba0      	ldr	r3, [pc, #640]	; (80034b4 <_dtoa_r+0x31c>)
 8003232:	9306      	str	r3, [sp, #24]
 8003234:	3303      	adds	r3, #3
 8003236:	e7f5      	b.n	8003224 <_dtoa_r+0x8c>
 8003238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800323c:	2200      	movs	r2, #0
 800323e:	2300      	movs	r3, #0
 8003240:	4630      	mov	r0, r6
 8003242:	4639      	mov	r1, r7
 8003244:	f7fd fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003248:	4682      	mov	sl, r0
 800324a:	b160      	cbz	r0, 8003266 <_dtoa_r+0xce>
 800324c:	2301      	movs	r3, #1
 800324e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8520 	beq.w	8003c9a <_dtoa_r+0xb02>
 800325a:	4b98      	ldr	r3, [pc, #608]	; (80034bc <_dtoa_r+0x324>)
 800325c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	3b01      	subs	r3, #1
 8003262:	9306      	str	r3, [sp, #24]
 8003264:	e7e0      	b.n	8003228 <_dtoa_r+0x90>
 8003266:	ab12      	add	r3, sp, #72	; 0x48
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	ab13      	add	r3, sp, #76	; 0x4c
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4632      	mov	r2, r6
 8003270:	463b      	mov	r3, r7
 8003272:	4620      	mov	r0, r4
 8003274:	f001 f8ca 	bl	800440c <__d2b>
 8003278:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800327c:	4683      	mov	fp, r0
 800327e:	2d00      	cmp	r5, #0
 8003280:	d07d      	beq.n	800337e <_dtoa_r+0x1e6>
 8003282:	46b0      	mov	r8, r6
 8003284:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003288:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800328c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003290:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003294:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003298:	2200      	movs	r2, #0
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <_dtoa_r+0x328>)
 800329c:	4640      	mov	r0, r8
 800329e:	4649      	mov	r1, r9
 80032a0:	f7fc ff62 	bl	8000168 <__aeabi_dsub>
 80032a4:	a37c      	add	r3, pc, #496	; (adr r3, 8003498 <_dtoa_r+0x300>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f915 	bl	80004d8 <__aeabi_dmul>
 80032ae:	a37c      	add	r3, pc, #496	; (adr r3, 80034a0 <_dtoa_r+0x308>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fc ff5a 	bl	800016c <__adddf3>
 80032b8:	4606      	mov	r6, r0
 80032ba:	4628      	mov	r0, r5
 80032bc:	460f      	mov	r7, r1
 80032be:	f7fd f8a1 	bl	8000404 <__aeabi_i2d>
 80032c2:	a379      	add	r3, pc, #484	; (adr r3, 80034a8 <_dtoa_r+0x310>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f7fd f906 	bl	80004d8 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4630      	mov	r0, r6
 80032d2:	4639      	mov	r1, r7
 80032d4:	f7fc ff4a 	bl	800016c <__adddf3>
 80032d8:	4606      	mov	r6, r0
 80032da:	460f      	mov	r7, r1
 80032dc:	f7fd fbac 	bl	8000a38 <__aeabi_d2iz>
 80032e0:	2200      	movs	r2, #0
 80032e2:	4682      	mov	sl, r0
 80032e4:	2300      	movs	r3, #0
 80032e6:	4630      	mov	r0, r6
 80032e8:	4639      	mov	r1, r7
 80032ea:	f7fd fb67 	bl	80009bc <__aeabi_dcmplt>
 80032ee:	b148      	cbz	r0, 8003304 <_dtoa_r+0x16c>
 80032f0:	4650      	mov	r0, sl
 80032f2:	f7fd f887 	bl	8000404 <__aeabi_i2d>
 80032f6:	4632      	mov	r2, r6
 80032f8:	463b      	mov	r3, r7
 80032fa:	f7fd fb55 	bl	80009a8 <__aeabi_dcmpeq>
 80032fe:	b908      	cbnz	r0, 8003304 <_dtoa_r+0x16c>
 8003300:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003304:	f1ba 0f16 	cmp.w	sl, #22
 8003308:	d85a      	bhi.n	80033c0 <_dtoa_r+0x228>
 800330a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800330e:	496d      	ldr	r1, [pc, #436]	; (80034c4 <_dtoa_r+0x32c>)
 8003310:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003318:	f7fd fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800331c:	2800      	cmp	r0, #0
 800331e:	d051      	beq.n	80033c4 <_dtoa_r+0x22c>
 8003320:	2300      	movs	r3, #0
 8003322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003326:	930d      	str	r3, [sp, #52]	; 0x34
 8003328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800332a:	1b5d      	subs	r5, r3, r5
 800332c:	1e6b      	subs	r3, r5, #1
 800332e:	9307      	str	r3, [sp, #28]
 8003330:	bf43      	ittte	mi
 8003332:	2300      	movmi	r3, #0
 8003334:	f1c5 0901 	rsbmi	r9, r5, #1
 8003338:	9307      	strmi	r3, [sp, #28]
 800333a:	f04f 0900 	movpl.w	r9, #0
 800333e:	f1ba 0f00 	cmp.w	sl, #0
 8003342:	db41      	blt.n	80033c8 <_dtoa_r+0x230>
 8003344:	9b07      	ldr	r3, [sp, #28]
 8003346:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800334a:	4453      	add	r3, sl
 800334c:	9307      	str	r3, [sp, #28]
 800334e:	2300      	movs	r3, #0
 8003350:	9308      	str	r3, [sp, #32]
 8003352:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003354:	2b09      	cmp	r3, #9
 8003356:	f200 808f 	bhi.w	8003478 <_dtoa_r+0x2e0>
 800335a:	2b05      	cmp	r3, #5
 800335c:	bfc4      	itt	gt
 800335e:	3b04      	subgt	r3, #4
 8003360:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003362:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003364:	bfc8      	it	gt
 8003366:	2500      	movgt	r5, #0
 8003368:	f1a3 0302 	sub.w	r3, r3, #2
 800336c:	bfd8      	it	le
 800336e:	2501      	movle	r5, #1
 8003370:	2b03      	cmp	r3, #3
 8003372:	f200 808d 	bhi.w	8003490 <_dtoa_r+0x2f8>
 8003376:	e8df f003 	tbb	[pc, r3]
 800337a:	7d7b      	.short	0x7d7b
 800337c:	6f2f      	.short	0x6f2f
 800337e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003382:	441d      	add	r5, r3
 8003384:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003388:	2820      	cmp	r0, #32
 800338a:	dd13      	ble.n	80033b4 <_dtoa_r+0x21c>
 800338c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003390:	9b02      	ldr	r3, [sp, #8]
 8003392:	fa08 f800 	lsl.w	r8, r8, r0
 8003396:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800339a:	fa23 f000 	lsr.w	r0, r3, r0
 800339e:	ea48 0000 	orr.w	r0, r8, r0
 80033a2:	f7fd f81f 	bl	80003e4 <__aeabi_ui2d>
 80033a6:	2301      	movs	r3, #1
 80033a8:	4680      	mov	r8, r0
 80033aa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80033ae:	3d01      	subs	r5, #1
 80033b0:	9310      	str	r3, [sp, #64]	; 0x40
 80033b2:	e771      	b.n	8003298 <_dtoa_r+0x100>
 80033b4:	9b02      	ldr	r3, [sp, #8]
 80033b6:	f1c0 0020 	rsb	r0, r0, #32
 80033ba:	fa03 f000 	lsl.w	r0, r3, r0
 80033be:	e7f0      	b.n	80033a2 <_dtoa_r+0x20a>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e7b0      	b.n	8003326 <_dtoa_r+0x18e>
 80033c4:	900d      	str	r0, [sp, #52]	; 0x34
 80033c6:	e7af      	b.n	8003328 <_dtoa_r+0x190>
 80033c8:	f1ca 0300 	rsb	r3, sl, #0
 80033cc:	9308      	str	r3, [sp, #32]
 80033ce:	2300      	movs	r3, #0
 80033d0:	eba9 090a 	sub.w	r9, r9, sl
 80033d4:	930c      	str	r3, [sp, #48]	; 0x30
 80033d6:	e7bc      	b.n	8003352 <_dtoa_r+0x1ba>
 80033d8:	2301      	movs	r3, #1
 80033da:	9309      	str	r3, [sp, #36]	; 0x24
 80033dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	dd74      	ble.n	80034cc <_dtoa_r+0x334>
 80033e2:	4698      	mov	r8, r3
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	2200      	movs	r2, #0
 80033e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80033ea:	6072      	str	r2, [r6, #4]
 80033ec:	2204      	movs	r2, #4
 80033ee:	f102 0014 	add.w	r0, r2, #20
 80033f2:	4298      	cmp	r0, r3
 80033f4:	6871      	ldr	r1, [r6, #4]
 80033f6:	d96e      	bls.n	80034d6 <_dtoa_r+0x33e>
 80033f8:	4620      	mov	r0, r4
 80033fa:	f000 fd7a 	bl	8003ef2 <_Balloc>
 80033fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003400:	6030      	str	r0, [r6, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b8 0f0e 	cmp.w	r8, #14
 8003408:	9306      	str	r3, [sp, #24]
 800340a:	f200 80ed 	bhi.w	80035e8 <_dtoa_r+0x450>
 800340e:	2d00      	cmp	r5, #0
 8003410:	f000 80ea 	beq.w	80035e8 <_dtoa_r+0x450>
 8003414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003418:	f1ba 0f00 	cmp.w	sl, #0
 800341c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003420:	dd77      	ble.n	8003512 <_dtoa_r+0x37a>
 8003422:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <_dtoa_r+0x32c>)
 8003424:	f00a 030f 	and.w	r3, sl, #15
 8003428:	ea4f 162a 	mov.w	r6, sl, asr #4
 800342c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003430:	06f0      	lsls	r0, r6, #27
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800343a:	d568      	bpl.n	800350e <_dtoa_r+0x376>
 800343c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <_dtoa_r+0x330>)
 8003442:	2503      	movs	r5, #3
 8003444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003448:	f7fd f970 	bl	800072c <__aeabi_ddiv>
 800344c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003450:	f006 060f 	and.w	r6, r6, #15
 8003454:	4f1c      	ldr	r7, [pc, #112]	; (80034c8 <_dtoa_r+0x330>)
 8003456:	e04f      	b.n	80034f8 <_dtoa_r+0x360>
 8003458:	2301      	movs	r3, #1
 800345a:	9309      	str	r3, [sp, #36]	; 0x24
 800345c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800345e:	4453      	add	r3, sl
 8003460:	f103 0801 	add.w	r8, r3, #1
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	4643      	mov	r3, r8
 8003468:	2b01      	cmp	r3, #1
 800346a:	bfb8      	it	lt
 800346c:	2301      	movlt	r3, #1
 800346e:	e7ba      	b.n	80033e6 <_dtoa_r+0x24e>
 8003470:	2300      	movs	r3, #0
 8003472:	e7b2      	b.n	80033da <_dtoa_r+0x242>
 8003474:	2300      	movs	r3, #0
 8003476:	e7f0      	b.n	800345a <_dtoa_r+0x2c2>
 8003478:	2501      	movs	r5, #1
 800347a:	2300      	movs	r3, #0
 800347c:	9509      	str	r5, [sp, #36]	; 0x24
 800347e:	931e      	str	r3, [sp, #120]	; 0x78
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	2200      	movs	r2, #0
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	4698      	mov	r8, r3
 800348a:	2312      	movs	r3, #18
 800348c:	921f      	str	r2, [sp, #124]	; 0x7c
 800348e:	e7aa      	b.n	80033e6 <_dtoa_r+0x24e>
 8003490:	2301      	movs	r3, #1
 8003492:	9309      	str	r3, [sp, #36]	; 0x24
 8003494:	e7f4      	b.n	8003480 <_dtoa_r+0x2e8>
 8003496:	bf00      	nop
 8003498:	636f4361 	.word	0x636f4361
 800349c:	3fd287a7 	.word	0x3fd287a7
 80034a0:	8b60c8b3 	.word	0x8b60c8b3
 80034a4:	3fc68a28 	.word	0x3fc68a28
 80034a8:	509f79fb 	.word	0x509f79fb
 80034ac:	3fd34413 	.word	0x3fd34413
 80034b0:	7ff00000 	.word	0x7ff00000
 80034b4:	08004ea9 	.word	0x08004ea9
 80034b8:	08004ea0 	.word	0x08004ea0
 80034bc:	08004e7d 	.word	0x08004e7d
 80034c0:	3ff80000 	.word	0x3ff80000
 80034c4:	08004f38 	.word	0x08004f38
 80034c8:	08004f10 	.word	0x08004f10
 80034cc:	2301      	movs	r3, #1
 80034ce:	9304      	str	r3, [sp, #16]
 80034d0:	4698      	mov	r8, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	e7da      	b.n	800348c <_dtoa_r+0x2f4>
 80034d6:	3101      	adds	r1, #1
 80034d8:	6071      	str	r1, [r6, #4]
 80034da:	0052      	lsls	r2, r2, #1
 80034dc:	e787      	b.n	80033ee <_dtoa_r+0x256>
 80034de:	07f1      	lsls	r1, r6, #31
 80034e0:	d508      	bpl.n	80034f4 <_dtoa_r+0x35c>
 80034e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	f7fc fff5 	bl	80004d8 <__aeabi_dmul>
 80034ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80034f2:	3501      	adds	r5, #1
 80034f4:	1076      	asrs	r6, r6, #1
 80034f6:	3708      	adds	r7, #8
 80034f8:	2e00      	cmp	r6, #0
 80034fa:	d1f0      	bne.n	80034de <_dtoa_r+0x346>
 80034fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003504:	f7fd f912 	bl	800072c <__aeabi_ddiv>
 8003508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800350c:	e01b      	b.n	8003546 <_dtoa_r+0x3ae>
 800350e:	2502      	movs	r5, #2
 8003510:	e7a0      	b.n	8003454 <_dtoa_r+0x2bc>
 8003512:	f000 80a4 	beq.w	800365e <_dtoa_r+0x4c6>
 8003516:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800351a:	f1ca 0600 	rsb	r6, sl, #0
 800351e:	4ba0      	ldr	r3, [pc, #640]	; (80037a0 <_dtoa_r+0x608>)
 8003520:	f006 020f 	and.w	r2, r6, #15
 8003524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f7fc ffd4 	bl	80004d8 <__aeabi_dmul>
 8003530:	2502      	movs	r5, #2
 8003532:	2300      	movs	r3, #0
 8003534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003538:	4f9a      	ldr	r7, [pc, #616]	; (80037a4 <_dtoa_r+0x60c>)
 800353a:	1136      	asrs	r6, r6, #4
 800353c:	2e00      	cmp	r6, #0
 800353e:	f040 8083 	bne.w	8003648 <_dtoa_r+0x4b0>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e0      	bne.n	8003508 <_dtoa_r+0x370>
 8003546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 808a 	beq.w	8003662 <_dtoa_r+0x4ca>
 800354e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003552:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003556:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800355a:	2200      	movs	r2, #0
 800355c:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <_dtoa_r+0x610>)
 800355e:	f7fd fa2d 	bl	80009bc <__aeabi_dcmplt>
 8003562:	2800      	cmp	r0, #0
 8003564:	d07d      	beq.n	8003662 <_dtoa_r+0x4ca>
 8003566:	f1b8 0f00 	cmp.w	r8, #0
 800356a:	d07a      	beq.n	8003662 <_dtoa_r+0x4ca>
 800356c:	9b04      	ldr	r3, [sp, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	dd36      	ble.n	80035e0 <_dtoa_r+0x448>
 8003572:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003576:	2200      	movs	r2, #0
 8003578:	4b8c      	ldr	r3, [pc, #560]	; (80037ac <_dtoa_r+0x614>)
 800357a:	f7fc ffad 	bl	80004d8 <__aeabi_dmul>
 800357e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003582:	9e04      	ldr	r6, [sp, #16]
 8003584:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003588:	3501      	adds	r5, #1
 800358a:	4628      	mov	r0, r5
 800358c:	f7fc ff3a 	bl	8000404 <__aeabi_i2d>
 8003590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003594:	f7fc ffa0 	bl	80004d8 <__aeabi_dmul>
 8003598:	2200      	movs	r2, #0
 800359a:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <_dtoa_r+0x618>)
 800359c:	f7fc fde6 	bl	800016c <__adddf3>
 80035a0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80035a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035a8:	950b      	str	r5, [sp, #44]	; 0x2c
 80035aa:	2e00      	cmp	r6, #0
 80035ac:	d15c      	bne.n	8003668 <_dtoa_r+0x4d0>
 80035ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <_dtoa_r+0x61c>)
 80035b6:	f7fc fdd7 	bl	8000168 <__aeabi_dsub>
 80035ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035bc:	462b      	mov	r3, r5
 80035be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035c2:	f7fd fa19 	bl	80009f8 <__aeabi_dcmpgt>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	f040 8281 	bne.w	8003ace <_dtoa_r+0x936>
 80035cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035d2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80035d6:	f7fd f9f1 	bl	80009bc <__aeabi_dcmplt>
 80035da:	2800      	cmp	r0, #0
 80035dc:	f040 8275 	bne.w	8003aca <_dtoa_r+0x932>
 80035e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80035e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f2c0 814b 	blt.w	8003886 <_dtoa_r+0x6ee>
 80035f0:	f1ba 0f0e 	cmp.w	sl, #14
 80035f4:	f300 8147 	bgt.w	8003886 <_dtoa_r+0x6ee>
 80035f8:	4b69      	ldr	r3, [pc, #420]	; (80037a0 <_dtoa_r+0x608>)
 80035fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003606:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003608:	2b00      	cmp	r3, #0
 800360a:	f280 80d7 	bge.w	80037bc <_dtoa_r+0x624>
 800360e:	f1b8 0f00 	cmp.w	r8, #0
 8003612:	f300 80d3 	bgt.w	80037bc <_dtoa_r+0x624>
 8003616:	f040 8257 	bne.w	8003ac8 <_dtoa_r+0x930>
 800361a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800361e:	2200      	movs	r2, #0
 8003620:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <_dtoa_r+0x61c>)
 8003622:	f7fc ff59 	bl	80004d8 <__aeabi_dmul>
 8003626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800362a:	f7fd f9db 	bl	80009e4 <__aeabi_dcmpge>
 800362e:	4646      	mov	r6, r8
 8003630:	4647      	mov	r7, r8
 8003632:	2800      	cmp	r0, #0
 8003634:	f040 822d 	bne.w	8003a92 <_dtoa_r+0x8fa>
 8003638:	9b06      	ldr	r3, [sp, #24]
 800363a:	9a06      	ldr	r2, [sp, #24]
 800363c:	1c5d      	adds	r5, r3, #1
 800363e:	2331      	movs	r3, #49	; 0x31
 8003640:	f10a 0a01 	add.w	sl, sl, #1
 8003644:	7013      	strb	r3, [r2, #0]
 8003646:	e228      	b.n	8003a9a <_dtoa_r+0x902>
 8003648:	07f2      	lsls	r2, r6, #31
 800364a:	d505      	bpl.n	8003658 <_dtoa_r+0x4c0>
 800364c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003650:	f7fc ff42 	bl	80004d8 <__aeabi_dmul>
 8003654:	2301      	movs	r3, #1
 8003656:	3501      	adds	r5, #1
 8003658:	1076      	asrs	r6, r6, #1
 800365a:	3708      	adds	r7, #8
 800365c:	e76e      	b.n	800353c <_dtoa_r+0x3a4>
 800365e:	2502      	movs	r5, #2
 8003660:	e771      	b.n	8003546 <_dtoa_r+0x3ae>
 8003662:	4657      	mov	r7, sl
 8003664:	4646      	mov	r6, r8
 8003666:	e790      	b.n	800358a <_dtoa_r+0x3f2>
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <_dtoa_r+0x608>)
 800366a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800366e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d048      	beq.n	800370a <_dtoa_r+0x572>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	2000      	movs	r0, #0
 800367e:	494e      	ldr	r1, [pc, #312]	; (80037b8 <_dtoa_r+0x620>)
 8003680:	f7fd f854 	bl	800072c <__aeabi_ddiv>
 8003684:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003688:	f7fc fd6e 	bl	8000168 <__aeabi_dsub>
 800368c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003690:	9d06      	ldr	r5, [sp, #24]
 8003692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003696:	f7fd f9cf 	bl	8000a38 <__aeabi_d2iz>
 800369a:	9011      	str	r0, [sp, #68]	; 0x44
 800369c:	f7fc feb2 	bl	8000404 <__aeabi_i2d>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036a8:	f7fc fd5e 	bl	8000168 <__aeabi_dsub>
 80036ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036b2:	3330      	adds	r3, #48	; 0x30
 80036b4:	f805 3b01 	strb.w	r3, [r5], #1
 80036b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036bc:	f7fd f97e 	bl	80009bc <__aeabi_dcmplt>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d163      	bne.n	800378c <_dtoa_r+0x5f4>
 80036c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036c8:	2000      	movs	r0, #0
 80036ca:	4937      	ldr	r1, [pc, #220]	; (80037a8 <_dtoa_r+0x610>)
 80036cc:	f7fc fd4c 	bl	8000168 <__aeabi_dsub>
 80036d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036d4:	f7fd f972 	bl	80009bc <__aeabi_dcmplt>
 80036d8:	2800      	cmp	r0, #0
 80036da:	f040 80b5 	bne.w	8003848 <_dtoa_r+0x6b0>
 80036de:	9b06      	ldr	r3, [sp, #24]
 80036e0:	1aeb      	subs	r3, r5, r3
 80036e2:	429e      	cmp	r6, r3
 80036e4:	f77f af7c 	ble.w	80035e0 <_dtoa_r+0x448>
 80036e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80036ec:	2200      	movs	r2, #0
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <_dtoa_r+0x614>)
 80036f0:	f7fc fef2 	bl	80004d8 <__aeabi_dmul>
 80036f4:	2200      	movs	r2, #0
 80036f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80036fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <_dtoa_r+0x614>)
 8003700:	f7fc feea 	bl	80004d8 <__aeabi_dmul>
 8003704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003708:	e7c3      	b.n	8003692 <_dtoa_r+0x4fa>
 800370a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800370e:	f7fc fee3 	bl	80004d8 <__aeabi_dmul>
 8003712:	9b06      	ldr	r3, [sp, #24]
 8003714:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003718:	199d      	adds	r5, r3, r6
 800371a:	461e      	mov	r6, r3
 800371c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003720:	f7fd f98a 	bl	8000a38 <__aeabi_d2iz>
 8003724:	9011      	str	r0, [sp, #68]	; 0x44
 8003726:	f7fc fe6d 	bl	8000404 <__aeabi_i2d>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003732:	f7fc fd19 	bl	8000168 <__aeabi_dsub>
 8003736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800373c:	3330      	adds	r3, #48	; 0x30
 800373e:	f806 3b01 	strb.w	r3, [r6], #1
 8003742:	42ae      	cmp	r6, r5
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	d124      	bne.n	8003794 <_dtoa_r+0x5fc>
 800374a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <_dtoa_r+0x620>)
 8003750:	f7fc fd0c 	bl	800016c <__adddf3>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800375c:	f7fd f94c 	bl	80009f8 <__aeabi_dcmpgt>
 8003760:	2800      	cmp	r0, #0
 8003762:	d171      	bne.n	8003848 <_dtoa_r+0x6b0>
 8003764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003768:	2000      	movs	r0, #0
 800376a:	4913      	ldr	r1, [pc, #76]	; (80037b8 <_dtoa_r+0x620>)
 800376c:	f7fc fcfc 	bl	8000168 <__aeabi_dsub>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003778:	f7fd f920 	bl	80009bc <__aeabi_dcmplt>
 800377c:	2800      	cmp	r0, #0
 800377e:	f43f af2f 	beq.w	80035e0 <_dtoa_r+0x448>
 8003782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003786:	1e6a      	subs	r2, r5, #1
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d001      	beq.n	8003790 <_dtoa_r+0x5f8>
 800378c:	46ba      	mov	sl, r7
 800378e:	e04a      	b.n	8003826 <_dtoa_r+0x68e>
 8003790:	4615      	mov	r5, r2
 8003792:	e7f6      	b.n	8003782 <_dtoa_r+0x5ea>
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <_dtoa_r+0x614>)
 8003796:	f7fc fe9f 	bl	80004d8 <__aeabi_dmul>
 800379a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800379e:	e7bd      	b.n	800371c <_dtoa_r+0x584>
 80037a0:	08004f38 	.word	0x08004f38
 80037a4:	08004f10 	.word	0x08004f10
 80037a8:	3ff00000 	.word	0x3ff00000
 80037ac:	40240000 	.word	0x40240000
 80037b0:	401c0000 	.word	0x401c0000
 80037b4:	40140000 	.word	0x40140000
 80037b8:	3fe00000 	.word	0x3fe00000
 80037bc:	9d06      	ldr	r5, [sp, #24]
 80037be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80037c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037c6:	4630      	mov	r0, r6
 80037c8:	4639      	mov	r1, r7
 80037ca:	f7fc ffaf 	bl	800072c <__aeabi_ddiv>
 80037ce:	f7fd f933 	bl	8000a38 <__aeabi_d2iz>
 80037d2:	4681      	mov	r9, r0
 80037d4:	f7fc fe16 	bl	8000404 <__aeabi_i2d>
 80037d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037dc:	f7fc fe7c 	bl	80004d8 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4630      	mov	r0, r6
 80037e6:	4639      	mov	r1, r7
 80037e8:	f7fc fcbe 	bl	8000168 <__aeabi_dsub>
 80037ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80037f0:	f805 6b01 	strb.w	r6, [r5], #1
 80037f4:	9e06      	ldr	r6, [sp, #24]
 80037f6:	4602      	mov	r2, r0
 80037f8:	1bae      	subs	r6, r5, r6
 80037fa:	45b0      	cmp	r8, r6
 80037fc:	460b      	mov	r3, r1
 80037fe:	d135      	bne.n	800386c <_dtoa_r+0x6d4>
 8003800:	f7fc fcb4 	bl	800016c <__adddf3>
 8003804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003808:	4606      	mov	r6, r0
 800380a:	460f      	mov	r7, r1
 800380c:	f7fd f8f4 	bl	80009f8 <__aeabi_dcmpgt>
 8003810:	b9c8      	cbnz	r0, 8003846 <_dtoa_r+0x6ae>
 8003812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003816:	4630      	mov	r0, r6
 8003818:	4639      	mov	r1, r7
 800381a:	f7fd f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800381e:	b110      	cbz	r0, 8003826 <_dtoa_r+0x68e>
 8003820:	f019 0f01 	tst.w	r9, #1
 8003824:	d10f      	bne.n	8003846 <_dtoa_r+0x6ae>
 8003826:	4659      	mov	r1, fp
 8003828:	4620      	mov	r0, r4
 800382a:	f000 fb96 	bl	8003f5a <_Bfree>
 800382e:	2300      	movs	r3, #0
 8003830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003832:	702b      	strb	r3, [r5, #0]
 8003834:	f10a 0301 	add.w	r3, sl, #1
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800383c:	2b00      	cmp	r3, #0
 800383e:	f43f acf3 	beq.w	8003228 <_dtoa_r+0x90>
 8003842:	601d      	str	r5, [r3, #0]
 8003844:	e4f0      	b.n	8003228 <_dtoa_r+0x90>
 8003846:	4657      	mov	r7, sl
 8003848:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800384c:	1e6b      	subs	r3, r5, #1
 800384e:	2a39      	cmp	r2, #57	; 0x39
 8003850:	d106      	bne.n	8003860 <_dtoa_r+0x6c8>
 8003852:	9a06      	ldr	r2, [sp, #24]
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <_dtoa_r+0x6d0>
 8003858:	2330      	movs	r3, #48	; 0x30
 800385a:	7013      	strb	r3, [r2, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	3701      	adds	r7, #1
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	3201      	adds	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e791      	b.n	800378c <_dtoa_r+0x5f4>
 8003868:	461d      	mov	r5, r3
 800386a:	e7ed      	b.n	8003848 <_dtoa_r+0x6b0>
 800386c:	2200      	movs	r2, #0
 800386e:	4b99      	ldr	r3, [pc, #612]	; (8003ad4 <_dtoa_r+0x93c>)
 8003870:	f7fc fe32 	bl	80004d8 <__aeabi_dmul>
 8003874:	2200      	movs	r2, #0
 8003876:	2300      	movs	r3, #0
 8003878:	4606      	mov	r6, r0
 800387a:	460f      	mov	r7, r1
 800387c:	f7fd f894 	bl	80009a8 <__aeabi_dcmpeq>
 8003880:	2800      	cmp	r0, #0
 8003882:	d09e      	beq.n	80037c2 <_dtoa_r+0x62a>
 8003884:	e7cf      	b.n	8003826 <_dtoa_r+0x68e>
 8003886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003888:	2a00      	cmp	r2, #0
 800388a:	f000 8088 	beq.w	800399e <_dtoa_r+0x806>
 800388e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003890:	2a01      	cmp	r2, #1
 8003892:	dc6d      	bgt.n	8003970 <_dtoa_r+0x7d8>
 8003894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003896:	2a00      	cmp	r2, #0
 8003898:	d066      	beq.n	8003968 <_dtoa_r+0x7d0>
 800389a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800389e:	464d      	mov	r5, r9
 80038a0:	9e08      	ldr	r6, [sp, #32]
 80038a2:	9a07      	ldr	r2, [sp, #28]
 80038a4:	2101      	movs	r1, #1
 80038a6:	441a      	add	r2, r3
 80038a8:	4620      	mov	r0, r4
 80038aa:	4499      	add	r9, r3
 80038ac:	9207      	str	r2, [sp, #28]
 80038ae:	f000 fbf4 	bl	800409a <__i2b>
 80038b2:	4607      	mov	r7, r0
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	dd0b      	ble.n	80038d0 <_dtoa_r+0x738>
 80038b8:	9b07      	ldr	r3, [sp, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	dd08      	ble.n	80038d0 <_dtoa_r+0x738>
 80038be:	42ab      	cmp	r3, r5
 80038c0:	bfa8      	it	ge
 80038c2:	462b      	movge	r3, r5
 80038c4:	9a07      	ldr	r2, [sp, #28]
 80038c6:	eba9 0903 	sub.w	r9, r9, r3
 80038ca:	1aed      	subs	r5, r5, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	9307      	str	r3, [sp, #28]
 80038d0:	9b08      	ldr	r3, [sp, #32]
 80038d2:	b1eb      	cbz	r3, 8003910 <_dtoa_r+0x778>
 80038d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d065      	beq.n	80039a6 <_dtoa_r+0x80e>
 80038da:	b18e      	cbz	r6, 8003900 <_dtoa_r+0x768>
 80038dc:	4639      	mov	r1, r7
 80038de:	4632      	mov	r2, r6
 80038e0:	4620      	mov	r0, r4
 80038e2:	f000 fc79 	bl	80041d8 <__pow5mult>
 80038e6:	465a      	mov	r2, fp
 80038e8:	4601      	mov	r1, r0
 80038ea:	4607      	mov	r7, r0
 80038ec:	4620      	mov	r0, r4
 80038ee:	f000 fbdd 	bl	80040ac <__multiply>
 80038f2:	4659      	mov	r1, fp
 80038f4:	900a      	str	r0, [sp, #40]	; 0x28
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 fb2f 	bl	8003f5a <_Bfree>
 80038fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038fe:	469b      	mov	fp, r3
 8003900:	9b08      	ldr	r3, [sp, #32]
 8003902:	1b9a      	subs	r2, r3, r6
 8003904:	d004      	beq.n	8003910 <_dtoa_r+0x778>
 8003906:	4659      	mov	r1, fp
 8003908:	4620      	mov	r0, r4
 800390a:	f000 fc65 	bl	80041d8 <__pow5mult>
 800390e:	4683      	mov	fp, r0
 8003910:	2101      	movs	r1, #1
 8003912:	4620      	mov	r0, r4
 8003914:	f000 fbc1 	bl	800409a <__i2b>
 8003918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800391a:	4606      	mov	r6, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 81c6 	beq.w	8003cae <_dtoa_r+0xb16>
 8003922:	461a      	mov	r2, r3
 8003924:	4601      	mov	r1, r0
 8003926:	4620      	mov	r0, r4
 8003928:	f000 fc56 	bl	80041d8 <__pow5mult>
 800392c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800392e:	4606      	mov	r6, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	dc3e      	bgt.n	80039b2 <_dtoa_r+0x81a>
 8003934:	9b02      	ldr	r3, [sp, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d137      	bne.n	80039aa <_dtoa_r+0x812>
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003940:	2b00      	cmp	r3, #0
 8003942:	d134      	bne.n	80039ae <_dtoa_r+0x816>
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800394a:	0d1b      	lsrs	r3, r3, #20
 800394c:	051b      	lsls	r3, r3, #20
 800394e:	b12b      	cbz	r3, 800395c <_dtoa_r+0x7c4>
 8003950:	9b07      	ldr	r3, [sp, #28]
 8003952:	f109 0901 	add.w	r9, r9, #1
 8003956:	3301      	adds	r3, #1
 8003958:	9307      	str	r3, [sp, #28]
 800395a:	2301      	movs	r3, #1
 800395c:	9308      	str	r3, [sp, #32]
 800395e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003960:	2b00      	cmp	r3, #0
 8003962:	d128      	bne.n	80039b6 <_dtoa_r+0x81e>
 8003964:	2001      	movs	r0, #1
 8003966:	e02e      	b.n	80039c6 <_dtoa_r+0x82e>
 8003968:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800396a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800396e:	e796      	b.n	800389e <_dtoa_r+0x706>
 8003970:	9b08      	ldr	r3, [sp, #32]
 8003972:	f108 36ff 	add.w	r6, r8, #4294967295
 8003976:	42b3      	cmp	r3, r6
 8003978:	bfb7      	itett	lt
 800397a:	9b08      	ldrlt	r3, [sp, #32]
 800397c:	1b9e      	subge	r6, r3, r6
 800397e:	1af2      	sublt	r2, r6, r3
 8003980:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003982:	bfbf      	itttt	lt
 8003984:	9608      	strlt	r6, [sp, #32]
 8003986:	189b      	addlt	r3, r3, r2
 8003988:	930c      	strlt	r3, [sp, #48]	; 0x30
 800398a:	2600      	movlt	r6, #0
 800398c:	f1b8 0f00 	cmp.w	r8, #0
 8003990:	bfb9      	ittee	lt
 8003992:	eba9 0508 	sublt.w	r5, r9, r8
 8003996:	2300      	movlt	r3, #0
 8003998:	464d      	movge	r5, r9
 800399a:	4643      	movge	r3, r8
 800399c:	e781      	b.n	80038a2 <_dtoa_r+0x70a>
 800399e:	9e08      	ldr	r6, [sp, #32]
 80039a0:	464d      	mov	r5, r9
 80039a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80039a4:	e786      	b.n	80038b4 <_dtoa_r+0x71c>
 80039a6:	9a08      	ldr	r2, [sp, #32]
 80039a8:	e7ad      	b.n	8003906 <_dtoa_r+0x76e>
 80039aa:	2300      	movs	r3, #0
 80039ac:	e7d6      	b.n	800395c <_dtoa_r+0x7c4>
 80039ae:	9b02      	ldr	r3, [sp, #8]
 80039b0:	e7d4      	b.n	800395c <_dtoa_r+0x7c4>
 80039b2:	2300      	movs	r3, #0
 80039b4:	9308      	str	r3, [sp, #32]
 80039b6:	6933      	ldr	r3, [r6, #16]
 80039b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80039bc:	6918      	ldr	r0, [r3, #16]
 80039be:	f000 fb1e 	bl	8003ffe <__hi0bits>
 80039c2:	f1c0 0020 	rsb	r0, r0, #32
 80039c6:	9b07      	ldr	r3, [sp, #28]
 80039c8:	4418      	add	r0, r3
 80039ca:	f010 001f 	ands.w	r0, r0, #31
 80039ce:	d047      	beq.n	8003a60 <_dtoa_r+0x8c8>
 80039d0:	f1c0 0320 	rsb	r3, r0, #32
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	dd3b      	ble.n	8003a50 <_dtoa_r+0x8b8>
 80039d8:	9b07      	ldr	r3, [sp, #28]
 80039da:	f1c0 001c 	rsb	r0, r0, #28
 80039de:	4481      	add	r9, r0
 80039e0:	4405      	add	r5, r0
 80039e2:	4403      	add	r3, r0
 80039e4:	9307      	str	r3, [sp, #28]
 80039e6:	f1b9 0f00 	cmp.w	r9, #0
 80039ea:	dd05      	ble.n	80039f8 <_dtoa_r+0x860>
 80039ec:	4659      	mov	r1, fp
 80039ee:	464a      	mov	r2, r9
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fc3f 	bl	8004274 <__lshift>
 80039f6:	4683      	mov	fp, r0
 80039f8:	9b07      	ldr	r3, [sp, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dd05      	ble.n	8003a0a <_dtoa_r+0x872>
 80039fe:	4631      	mov	r1, r6
 8003a00:	461a      	mov	r2, r3
 8003a02:	4620      	mov	r0, r4
 8003a04:	f000 fc36 	bl	8004274 <__lshift>
 8003a08:	4606      	mov	r6, r0
 8003a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a0c:	b353      	cbz	r3, 8003a64 <_dtoa_r+0x8cc>
 8003a0e:	4631      	mov	r1, r6
 8003a10:	4658      	mov	r0, fp
 8003a12:	f000 fc83 	bl	800431c <__mcmp>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	da24      	bge.n	8003a64 <_dtoa_r+0x8cc>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	220a      	movs	r2, #10
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 fab1 	bl	8003f88 <__multadd>
 8003a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a2c:	4683      	mov	fp, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8144 	beq.w	8003cbc <_dtoa_r+0xb24>
 8003a34:	2300      	movs	r3, #0
 8003a36:	4639      	mov	r1, r7
 8003a38:	220a      	movs	r2, #10
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f000 faa4 	bl	8003f88 <__multadd>
 8003a40:	9b04      	ldr	r3, [sp, #16]
 8003a42:	4607      	mov	r7, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dc4d      	bgt.n	8003ae4 <_dtoa_r+0x94c>
 8003a48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	dd4a      	ble.n	8003ae4 <_dtoa_r+0x94c>
 8003a4e:	e011      	b.n	8003a74 <_dtoa_r+0x8dc>
 8003a50:	d0c9      	beq.n	80039e6 <_dtoa_r+0x84e>
 8003a52:	9a07      	ldr	r2, [sp, #28]
 8003a54:	331c      	adds	r3, #28
 8003a56:	441a      	add	r2, r3
 8003a58:	4499      	add	r9, r3
 8003a5a:	441d      	add	r5, r3
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	e7c1      	b.n	80039e4 <_dtoa_r+0x84c>
 8003a60:	4603      	mov	r3, r0
 8003a62:	e7f6      	b.n	8003a52 <_dtoa_r+0x8ba>
 8003a64:	f1b8 0f00 	cmp.w	r8, #0
 8003a68:	dc36      	bgt.n	8003ad8 <_dtoa_r+0x940>
 8003a6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	dd33      	ble.n	8003ad8 <_dtoa_r+0x940>
 8003a70:	f8cd 8010 	str.w	r8, [sp, #16]
 8003a74:	9b04      	ldr	r3, [sp, #16]
 8003a76:	b963      	cbnz	r3, 8003a92 <_dtoa_r+0x8fa>
 8003a78:	4631      	mov	r1, r6
 8003a7a:	2205      	movs	r2, #5
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f000 fa83 	bl	8003f88 <__multadd>
 8003a82:	4601      	mov	r1, r0
 8003a84:	4606      	mov	r6, r0
 8003a86:	4658      	mov	r0, fp
 8003a88:	f000 fc48 	bl	800431c <__mcmp>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	f73f add3 	bgt.w	8003638 <_dtoa_r+0x4a0>
 8003a92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a94:	9d06      	ldr	r5, [sp, #24]
 8003a96:	ea6f 0a03 	mvn.w	sl, r3
 8003a9a:	f04f 0900 	mov.w	r9, #0
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 fa5a 	bl	8003f5a <_Bfree>
 8003aa6:	2f00      	cmp	r7, #0
 8003aa8:	f43f aebd 	beq.w	8003826 <_dtoa_r+0x68e>
 8003aac:	f1b9 0f00 	cmp.w	r9, #0
 8003ab0:	d005      	beq.n	8003abe <_dtoa_r+0x926>
 8003ab2:	45b9      	cmp	r9, r7
 8003ab4:	d003      	beq.n	8003abe <_dtoa_r+0x926>
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f000 fa4e 	bl	8003f5a <_Bfree>
 8003abe:	4639      	mov	r1, r7
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f000 fa4a 	bl	8003f5a <_Bfree>
 8003ac6:	e6ae      	b.n	8003826 <_dtoa_r+0x68e>
 8003ac8:	2600      	movs	r6, #0
 8003aca:	4637      	mov	r7, r6
 8003acc:	e7e1      	b.n	8003a92 <_dtoa_r+0x8fa>
 8003ace:	46ba      	mov	sl, r7
 8003ad0:	4637      	mov	r7, r6
 8003ad2:	e5b1      	b.n	8003638 <_dtoa_r+0x4a0>
 8003ad4:	40240000 	.word	0x40240000
 8003ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ada:	f8cd 8010 	str.w	r8, [sp, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80f3 	beq.w	8003cca <_dtoa_r+0xb32>
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	dd05      	ble.n	8003af4 <_dtoa_r+0x95c>
 8003ae8:	4639      	mov	r1, r7
 8003aea:	462a      	mov	r2, r5
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 fbc1 	bl	8004274 <__lshift>
 8003af2:	4607      	mov	r7, r0
 8003af4:	9b08      	ldr	r3, [sp, #32]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04c      	beq.n	8003b94 <_dtoa_r+0x9fc>
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 f9f8 	bl	8003ef2 <_Balloc>
 8003b02:	4605      	mov	r5, r0
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	f107 010c 	add.w	r1, r7, #12
 8003b0a:	3202      	adds	r2, #2
 8003b0c:	0092      	lsls	r2, r2, #2
 8003b0e:	300c      	adds	r0, #12
 8003b10:	f000 f9e4 	bl	8003edc <memcpy>
 8003b14:	2201      	movs	r2, #1
 8003b16:	4629      	mov	r1, r5
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f000 fbab 	bl	8004274 <__lshift>
 8003b1e:	46b9      	mov	r9, r7
 8003b20:	4607      	mov	r7, r0
 8003b22:	9b06      	ldr	r3, [sp, #24]
 8003b24:	9307      	str	r3, [sp, #28]
 8003b26:	9b02      	ldr	r3, [sp, #8]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	9308      	str	r3, [sp, #32]
 8003b2e:	4631      	mov	r1, r6
 8003b30:	4658      	mov	r0, fp
 8003b32:	f7ff faa1 	bl	8003078 <quorem>
 8003b36:	4649      	mov	r1, r9
 8003b38:	4605      	mov	r5, r0
 8003b3a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003b3e:	4658      	mov	r0, fp
 8003b40:	f000 fbec 	bl	800431c <__mcmp>
 8003b44:	463a      	mov	r2, r7
 8003b46:	9002      	str	r0, [sp, #8]
 8003b48:	4631      	mov	r1, r6
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 fc00 	bl	8004350 <__mdiff>
 8003b50:	68c3      	ldr	r3, [r0, #12]
 8003b52:	4602      	mov	r2, r0
 8003b54:	bb03      	cbnz	r3, 8003b98 <_dtoa_r+0xa00>
 8003b56:	4601      	mov	r1, r0
 8003b58:	9009      	str	r0, [sp, #36]	; 0x24
 8003b5a:	4658      	mov	r0, fp
 8003b5c:	f000 fbde 	bl	800431c <__mcmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b64:	4611      	mov	r1, r2
 8003b66:	4620      	mov	r0, r4
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6a:	f000 f9f6 	bl	8003f5a <_Bfree>
 8003b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b70:	b9a3      	cbnz	r3, 8003b9c <_dtoa_r+0xa04>
 8003b72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003b74:	b992      	cbnz	r2, 8003b9c <_dtoa_r+0xa04>
 8003b76:	9a08      	ldr	r2, [sp, #32]
 8003b78:	b982      	cbnz	r2, 8003b9c <_dtoa_r+0xa04>
 8003b7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003b7e:	d029      	beq.n	8003bd4 <_dtoa_r+0xa3c>
 8003b80:	9b02      	ldr	r3, [sp, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	dd01      	ble.n	8003b8a <_dtoa_r+0x9f2>
 8003b86:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003b8a:	9b07      	ldr	r3, [sp, #28]
 8003b8c:	1c5d      	adds	r5, r3, #1
 8003b8e:	f883 8000 	strb.w	r8, [r3]
 8003b92:	e784      	b.n	8003a9e <_dtoa_r+0x906>
 8003b94:	4638      	mov	r0, r7
 8003b96:	e7c2      	b.n	8003b1e <_dtoa_r+0x986>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e7e3      	b.n	8003b64 <_dtoa_r+0x9cc>
 8003b9c:	9a02      	ldr	r2, [sp, #8]
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	db04      	blt.n	8003bac <_dtoa_r+0xa14>
 8003ba2:	d123      	bne.n	8003bec <_dtoa_r+0xa54>
 8003ba4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ba6:	bb0a      	cbnz	r2, 8003bec <_dtoa_r+0xa54>
 8003ba8:	9a08      	ldr	r2, [sp, #32]
 8003baa:	b9fa      	cbnz	r2, 8003bec <_dtoa_r+0xa54>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	ddec      	ble.n	8003b8a <_dtoa_r+0x9f2>
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f000 fb5d 	bl	8004274 <__lshift>
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4683      	mov	fp, r0
 8003bbe:	f000 fbad 	bl	800431c <__mcmp>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	dc03      	bgt.n	8003bce <_dtoa_r+0xa36>
 8003bc6:	d1e0      	bne.n	8003b8a <_dtoa_r+0x9f2>
 8003bc8:	f018 0f01 	tst.w	r8, #1
 8003bcc:	d0dd      	beq.n	8003b8a <_dtoa_r+0x9f2>
 8003bce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003bd2:	d1d8      	bne.n	8003b86 <_dtoa_r+0x9ee>
 8003bd4:	9b07      	ldr	r3, [sp, #28]
 8003bd6:	9a07      	ldr	r2, [sp, #28]
 8003bd8:	1c5d      	adds	r5, r3, #1
 8003bda:	2339      	movs	r3, #57	; 0x39
 8003bdc:	7013      	strb	r3, [r2, #0]
 8003bde:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003be2:	1e6a      	subs	r2, r5, #1
 8003be4:	2b39      	cmp	r3, #57	; 0x39
 8003be6:	d04d      	beq.n	8003c84 <_dtoa_r+0xaec>
 8003be8:	3301      	adds	r3, #1
 8003bea:	e052      	b.n	8003c92 <_dtoa_r+0xafa>
 8003bec:	9a07      	ldr	r2, [sp, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f102 0501 	add.w	r5, r2, #1
 8003bf4:	dd06      	ble.n	8003c04 <_dtoa_r+0xa6c>
 8003bf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003bfa:	d0eb      	beq.n	8003bd4 <_dtoa_r+0xa3c>
 8003bfc:	f108 0801 	add.w	r8, r8, #1
 8003c00:	9b07      	ldr	r3, [sp, #28]
 8003c02:	e7c4      	b.n	8003b8e <_dtoa_r+0x9f6>
 8003c04:	9b06      	ldr	r3, [sp, #24]
 8003c06:	9a04      	ldr	r2, [sp, #16]
 8003c08:	1aeb      	subs	r3, r5, r3
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003c10:	d021      	beq.n	8003c56 <_dtoa_r+0xabe>
 8003c12:	4659      	mov	r1, fp
 8003c14:	2300      	movs	r3, #0
 8003c16:	220a      	movs	r2, #10
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f000 f9b5 	bl	8003f88 <__multadd>
 8003c1e:	45b9      	cmp	r9, r7
 8003c20:	4683      	mov	fp, r0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f04f 020a 	mov.w	r2, #10
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	d105      	bne.n	8003c3c <_dtoa_r+0xaa4>
 8003c30:	f000 f9aa 	bl	8003f88 <__multadd>
 8003c34:	4681      	mov	r9, r0
 8003c36:	4607      	mov	r7, r0
 8003c38:	9507      	str	r5, [sp, #28]
 8003c3a:	e778      	b.n	8003b2e <_dtoa_r+0x996>
 8003c3c:	f000 f9a4 	bl	8003f88 <__multadd>
 8003c40:	4639      	mov	r1, r7
 8003c42:	4681      	mov	r9, r0
 8003c44:	2300      	movs	r3, #0
 8003c46:	220a      	movs	r2, #10
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f000 f99d 	bl	8003f88 <__multadd>
 8003c4e:	4607      	mov	r7, r0
 8003c50:	e7f2      	b.n	8003c38 <_dtoa_r+0xaa0>
 8003c52:	f04f 0900 	mov.w	r9, #0
 8003c56:	4659      	mov	r1, fp
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fb0a 	bl	8004274 <__lshift>
 8003c60:	4631      	mov	r1, r6
 8003c62:	4683      	mov	fp, r0
 8003c64:	f000 fb5a 	bl	800431c <__mcmp>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	dcb8      	bgt.n	8003bde <_dtoa_r+0xa46>
 8003c6c:	d102      	bne.n	8003c74 <_dtoa_r+0xadc>
 8003c6e:	f018 0f01 	tst.w	r8, #1
 8003c72:	d1b4      	bne.n	8003bde <_dtoa_r+0xa46>
 8003c74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c78:	1e6a      	subs	r2, r5, #1
 8003c7a:	2b30      	cmp	r3, #48	; 0x30
 8003c7c:	f47f af0f 	bne.w	8003a9e <_dtoa_r+0x906>
 8003c80:	4615      	mov	r5, r2
 8003c82:	e7f7      	b.n	8003c74 <_dtoa_r+0xadc>
 8003c84:	9b06      	ldr	r3, [sp, #24]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d105      	bne.n	8003c96 <_dtoa_r+0xafe>
 8003c8a:	2331      	movs	r3, #49	; 0x31
 8003c8c:	9a06      	ldr	r2, [sp, #24]
 8003c8e:	f10a 0a01 	add.w	sl, sl, #1
 8003c92:	7013      	strb	r3, [r2, #0]
 8003c94:	e703      	b.n	8003a9e <_dtoa_r+0x906>
 8003c96:	4615      	mov	r5, r2
 8003c98:	e7a1      	b.n	8003bde <_dtoa_r+0xa46>
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <_dtoa_r+0xb60>)
 8003c9c:	f7ff bae1 	b.w	8003262 <_dtoa_r+0xca>
 8003ca0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f aabb 	bne.w	800321e <_dtoa_r+0x86>
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <_dtoa_r+0xb64>)
 8003caa:	f7ff bada 	b.w	8003262 <_dtoa_r+0xca>
 8003cae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f77f ae3f 	ble.w	8003934 <_dtoa_r+0x79c>
 8003cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cb8:	9308      	str	r3, [sp, #32]
 8003cba:	e653      	b.n	8003964 <_dtoa_r+0x7cc>
 8003cbc:	9b04      	ldr	r3, [sp, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dc03      	bgt.n	8003cca <_dtoa_r+0xb32>
 8003cc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f73f aed5 	bgt.w	8003a74 <_dtoa_r+0x8dc>
 8003cca:	9d06      	ldr	r5, [sp, #24]
 8003ccc:	4631      	mov	r1, r6
 8003cce:	4658      	mov	r0, fp
 8003cd0:	f7ff f9d2 	bl	8003078 <quorem>
 8003cd4:	9b06      	ldr	r3, [sp, #24]
 8003cd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003cda:	f805 8b01 	strb.w	r8, [r5], #1
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	1aeb      	subs	r3, r5, r3
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	ddb5      	ble.n	8003c52 <_dtoa_r+0xaba>
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	2300      	movs	r3, #0
 8003cea:	220a      	movs	r2, #10
 8003cec:	4620      	mov	r0, r4
 8003cee:	f000 f94b 	bl	8003f88 <__multadd>
 8003cf2:	4683      	mov	fp, r0
 8003cf4:	e7ea      	b.n	8003ccc <_dtoa_r+0xb34>
 8003cf6:	bf00      	nop
 8003cf8:	08004e7c 	.word	0x08004e7c
 8003cfc:	08004ea0 	.word	0x08004ea0

08003d00 <std>:
 8003d00:	2300      	movs	r3, #0
 8003d02:	b510      	push	{r4, lr}
 8003d04:	4604      	mov	r4, r0
 8003d06:	e9c0 3300 	strd	r3, r3, [r0]
 8003d0a:	6083      	str	r3, [r0, #8]
 8003d0c:	8181      	strh	r1, [r0, #12]
 8003d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d10:	81c2      	strh	r2, [r0, #14]
 8003d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d16:	6183      	str	r3, [r0, #24]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	305c      	adds	r0, #92	; 0x5c
 8003d1e:	f7fe fd3b 	bl	8002798 <memset>
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <std+0x38>)
 8003d24:	6224      	str	r4, [r4, #32]
 8003d26:	6263      	str	r3, [r4, #36]	; 0x24
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <std+0x3c>)
 8003d2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <std+0x40>)
 8003d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <std+0x44>)
 8003d32:	6323      	str	r3, [r4, #48]	; 0x30
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	bf00      	nop
 8003d38:	080048b1 	.word	0x080048b1
 8003d3c:	080048d3 	.word	0x080048d3
 8003d40:	0800490b 	.word	0x0800490b
 8003d44:	0800492f 	.word	0x0800492f

08003d48 <_cleanup_r>:
 8003d48:	4901      	ldr	r1, [pc, #4]	; (8003d50 <_cleanup_r+0x8>)
 8003d4a:	f000 b885 	b.w	8003e58 <_fwalk_reent>
 8003d4e:	bf00      	nop
 8003d50:	08004c09 	.word	0x08004c09

08003d54 <__sfmoreglue>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	2568      	movs	r5, #104	; 0x68
 8003d58:	1e4a      	subs	r2, r1, #1
 8003d5a:	4355      	muls	r5, r2
 8003d5c:	460e      	mov	r6, r1
 8003d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d62:	f000 fbfd 	bl	8004560 <_malloc_r>
 8003d66:	4604      	mov	r4, r0
 8003d68:	b140      	cbz	r0, 8003d7c <__sfmoreglue+0x28>
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8003d70:	300c      	adds	r0, #12
 8003d72:	60a0      	str	r0, [r4, #8]
 8003d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d78:	f7fe fd0e 	bl	8002798 <memset>
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}

08003d80 <__sinit>:
 8003d80:	6983      	ldr	r3, [r0, #24]
 8003d82:	b510      	push	{r4, lr}
 8003d84:	4604      	mov	r4, r0
 8003d86:	bb33      	cbnz	r3, 8003dd6 <__sinit+0x56>
 8003d88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003d8c:	6503      	str	r3, [r0, #80]	; 0x50
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <__sinit+0x58>)
 8003d90:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <__sinit+0x5c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6282      	str	r2, [r0, #40]	; 0x28
 8003d96:	4298      	cmp	r0, r3
 8003d98:	bf04      	itt	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	6183      	streq	r3, [r0, #24]
 8003d9e:	f000 f81f 	bl	8003de0 <__sfp>
 8003da2:	6060      	str	r0, [r4, #4]
 8003da4:	4620      	mov	r0, r4
 8003da6:	f000 f81b 	bl	8003de0 <__sfp>
 8003daa:	60a0      	str	r0, [r4, #8]
 8003dac:	4620      	mov	r0, r4
 8003dae:	f000 f817 	bl	8003de0 <__sfp>
 8003db2:	2200      	movs	r2, #0
 8003db4:	60e0      	str	r0, [r4, #12]
 8003db6:	2104      	movs	r1, #4
 8003db8:	6860      	ldr	r0, [r4, #4]
 8003dba:	f7ff ffa1 	bl	8003d00 <std>
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	2109      	movs	r1, #9
 8003dc2:	68a0      	ldr	r0, [r4, #8]
 8003dc4:	f7ff ff9c 	bl	8003d00 <std>
 8003dc8:	2202      	movs	r2, #2
 8003dca:	2112      	movs	r1, #18
 8003dcc:	68e0      	ldr	r0, [r4, #12]
 8003dce:	f7ff ff97 	bl	8003d00 <std>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61a3      	str	r3, [r4, #24]
 8003dd6:	bd10      	pop	{r4, pc}
 8003dd8:	08004e68 	.word	0x08004e68
 8003ddc:	08003d49 	.word	0x08003d49

08003de0 <__sfp>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <__sfp+0x70>)
 8003de4:	4607      	mov	r7, r0
 8003de6:	681e      	ldr	r6, [r3, #0]
 8003de8:	69b3      	ldr	r3, [r6, #24]
 8003dea:	b913      	cbnz	r3, 8003df2 <__sfp+0x12>
 8003dec:	4630      	mov	r0, r6
 8003dee:	f7ff ffc7 	bl	8003d80 <__sinit>
 8003df2:	3648      	adds	r6, #72	; 0x48
 8003df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	d503      	bpl.n	8003e04 <__sfp+0x24>
 8003dfc:	6833      	ldr	r3, [r6, #0]
 8003dfe:	b133      	cbz	r3, 8003e0e <__sfp+0x2e>
 8003e00:	6836      	ldr	r6, [r6, #0]
 8003e02:	e7f7      	b.n	8003df4 <__sfp+0x14>
 8003e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e08:	b16d      	cbz	r5, 8003e26 <__sfp+0x46>
 8003e0a:	3468      	adds	r4, #104	; 0x68
 8003e0c:	e7f4      	b.n	8003df8 <__sfp+0x18>
 8003e0e:	2104      	movs	r1, #4
 8003e10:	4638      	mov	r0, r7
 8003e12:	f7ff ff9f 	bl	8003d54 <__sfmoreglue>
 8003e16:	6030      	str	r0, [r6, #0]
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d1f1      	bne.n	8003e00 <__sfp+0x20>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	4604      	mov	r4, r0
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4620      	mov	r0, r4
 8003e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <__sfp+0x74>)
 8003e28:	6665      	str	r5, [r4, #100]	; 0x64
 8003e2a:	e9c4 5500 	strd	r5, r5, [r4]
 8003e2e:	60a5      	str	r5, [r4, #8]
 8003e30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e40:	f7fe fcaa 	bl	8002798 <memset>
 8003e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e4c:	e7e9      	b.n	8003e22 <__sfp+0x42>
 8003e4e:	bf00      	nop
 8003e50:	08004e68 	.word	0x08004e68
 8003e54:	ffff0001 	.word	0xffff0001

08003e58 <_fwalk_reent>:
 8003e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e5c:	4680      	mov	r8, r0
 8003e5e:	4689      	mov	r9, r1
 8003e60:	2600      	movs	r6, #0
 8003e62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e66:	b914      	cbnz	r4, 8003e6e <_fwalk_reent+0x16>
 8003e68:	4630      	mov	r0, r6
 8003e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003e72:	3f01      	subs	r7, #1
 8003e74:	d501      	bpl.n	8003e7a <_fwalk_reent+0x22>
 8003e76:	6824      	ldr	r4, [r4, #0]
 8003e78:	e7f5      	b.n	8003e66 <_fwalk_reent+0xe>
 8003e7a:	89ab      	ldrh	r3, [r5, #12]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d907      	bls.n	8003e90 <_fwalk_reent+0x38>
 8003e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e84:	3301      	adds	r3, #1
 8003e86:	d003      	beq.n	8003e90 <_fwalk_reent+0x38>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	47c8      	blx	r9
 8003e8e:	4306      	orrs	r6, r0
 8003e90:	3568      	adds	r5, #104	; 0x68
 8003e92:	e7ee      	b.n	8003e72 <_fwalk_reent+0x1a>

08003e94 <_localeconv_r>:
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <_localeconv_r+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a18      	ldr	r0, [r3, #32]
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <_localeconv_r+0x18>)
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	bf08      	it	eq
 8003ea0:	4618      	moveq	r0, r3
 8003ea2:	30f0      	adds	r0, #240	; 0xf0
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000014 	.word	0x20000014
 8003eac:	20000078 	.word	0x20000078

08003eb0 <malloc>:
 8003eb0:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <malloc+0xc>)
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	f000 bb53 	b.w	8004560 <_malloc_r>
 8003eba:	bf00      	nop
 8003ebc:	20000014 	.word	0x20000014

08003ec0 <memchr>:
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	b2c9      	uxtb	r1, r1
 8003ec4:	4402      	add	r2, r0
 8003ec6:	4290      	cmp	r0, r2
 8003ec8:	4603      	mov	r3, r0
 8003eca:	d101      	bne.n	8003ed0 <memchr+0x10>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e003      	b.n	8003ed8 <memchr+0x18>
 8003ed0:	781c      	ldrb	r4, [r3, #0]
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	428c      	cmp	r4, r1
 8003ed6:	d1f6      	bne.n	8003ec6 <memchr+0x6>
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd10      	pop	{r4, pc}

08003edc <memcpy>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	1e43      	subs	r3, r0, #1
 8003ee0:	440a      	add	r2, r1
 8003ee2:	4291      	cmp	r1, r2
 8003ee4:	d100      	bne.n	8003ee8 <memcpy+0xc>
 8003ee6:	bd10      	pop	{r4, pc}
 8003ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef0:	e7f7      	b.n	8003ee2 <memcpy+0x6>

08003ef2 <_Balloc>:
 8003ef2:	b570      	push	{r4, r5, r6, lr}
 8003ef4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	460e      	mov	r6, r1
 8003efa:	b93d      	cbnz	r5, 8003f0c <_Balloc+0x1a>
 8003efc:	2010      	movs	r0, #16
 8003efe:	f7ff ffd7 	bl	8003eb0 <malloc>
 8003f02:	6260      	str	r0, [r4, #36]	; 0x24
 8003f04:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f08:	6005      	str	r5, [r0, #0]
 8003f0a:	60c5      	str	r5, [r0, #12]
 8003f0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003f0e:	68eb      	ldr	r3, [r5, #12]
 8003f10:	b183      	cbz	r3, 8003f34 <_Balloc+0x42>
 8003f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003f1a:	b9b8      	cbnz	r0, 8003f4c <_Balloc+0x5a>
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f506 	lsl.w	r5, r1, r6
 8003f22:	1d6a      	adds	r2, r5, #5
 8003f24:	0092      	lsls	r2, r2, #2
 8003f26:	4620      	mov	r0, r4
 8003f28:	f000 fabf 	bl	80044aa <_calloc_r>
 8003f2c:	b160      	cbz	r0, 8003f48 <_Balloc+0x56>
 8003f2e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003f32:	e00e      	b.n	8003f52 <_Balloc+0x60>
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	2104      	movs	r1, #4
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fab6 	bl	80044aa <_calloc_r>
 8003f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f40:	60e8      	str	r0, [r5, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e4      	bne.n	8003f12 <_Balloc+0x20>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	6802      	ldr	r2, [r0, #0]
 8003f4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003f52:	2300      	movs	r3, #0
 8003f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f58:	e7f7      	b.n	8003f4a <_Balloc+0x58>

08003f5a <_Bfree>:
 8003f5a:	b570      	push	{r4, r5, r6, lr}
 8003f5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003f5e:	4606      	mov	r6, r0
 8003f60:	460d      	mov	r5, r1
 8003f62:	b93c      	cbnz	r4, 8003f74 <_Bfree+0x1a>
 8003f64:	2010      	movs	r0, #16
 8003f66:	f7ff ffa3 	bl	8003eb0 <malloc>
 8003f6a:	6270      	str	r0, [r6, #36]	; 0x24
 8003f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f70:	6004      	str	r4, [r0, #0]
 8003f72:	60c4      	str	r4, [r0, #12]
 8003f74:	b13d      	cbz	r5, 8003f86 <_Bfree+0x2c>
 8003f76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003f78:	686a      	ldr	r2, [r5, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f80:	6029      	str	r1, [r5, #0]
 8003f82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003f86:	bd70      	pop	{r4, r5, r6, pc}

08003f88 <__multadd>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	461f      	mov	r7, r3
 8003f8e:	4606      	mov	r6, r0
 8003f90:	460c      	mov	r4, r1
 8003f92:	2300      	movs	r3, #0
 8003f94:	690d      	ldr	r5, [r1, #16]
 8003f96:	f101 0c14 	add.w	ip, r1, #20
 8003f9a:	f8dc 0000 	ldr.w	r0, [ip]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b281      	uxth	r1, r0
 8003fa2:	fb02 7101 	mla	r1, r2, r1, r7
 8003fa6:	0c00      	lsrs	r0, r0, #16
 8003fa8:	0c0f      	lsrs	r7, r1, #16
 8003faa:	fb02 7000 	mla	r0, r2, r0, r7
 8003fae:	b289      	uxth	r1, r1
 8003fb0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003fb4:	429d      	cmp	r5, r3
 8003fb6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003fba:	f84c 1b04 	str.w	r1, [ip], #4
 8003fbe:	dcec      	bgt.n	8003f9a <__multadd+0x12>
 8003fc0:	b1d7      	cbz	r7, 8003ff8 <__multadd+0x70>
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dc12      	bgt.n	8003fee <__multadd+0x66>
 8003fc8:	6861      	ldr	r1, [r4, #4]
 8003fca:	4630      	mov	r0, r6
 8003fcc:	3101      	adds	r1, #1
 8003fce:	f7ff ff90 	bl	8003ef2 <_Balloc>
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	f104 010c 	add.w	r1, r4, #12
 8003fda:	3202      	adds	r2, #2
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	300c      	adds	r0, #12
 8003fe0:	f7ff ff7c 	bl	8003edc <memcpy>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f7ff ffb7 	bl	8003f5a <_Bfree>
 8003fec:	4644      	mov	r4, r8
 8003fee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ff2:	3501      	adds	r5, #1
 8003ff4:	615f      	str	r7, [r3, #20]
 8003ff6:	6125      	str	r5, [r4, #16]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ffe <__hi0bits>:
 8003ffe:	0c02      	lsrs	r2, r0, #16
 8004000:	0412      	lsls	r2, r2, #16
 8004002:	4603      	mov	r3, r0
 8004004:	b9b2      	cbnz	r2, 8004034 <__hi0bits+0x36>
 8004006:	0403      	lsls	r3, r0, #16
 8004008:	2010      	movs	r0, #16
 800400a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800400e:	bf04      	itt	eq
 8004010:	021b      	lsleq	r3, r3, #8
 8004012:	3008      	addeq	r0, #8
 8004014:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004018:	bf04      	itt	eq
 800401a:	011b      	lsleq	r3, r3, #4
 800401c:	3004      	addeq	r0, #4
 800401e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004022:	bf04      	itt	eq
 8004024:	009b      	lsleq	r3, r3, #2
 8004026:	3002      	addeq	r0, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	db06      	blt.n	800403a <__hi0bits+0x3c>
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	d503      	bpl.n	8004038 <__hi0bits+0x3a>
 8004030:	3001      	adds	r0, #1
 8004032:	4770      	bx	lr
 8004034:	2000      	movs	r0, #0
 8004036:	e7e8      	b.n	800400a <__hi0bits+0xc>
 8004038:	2020      	movs	r0, #32
 800403a:	4770      	bx	lr

0800403c <__lo0bits>:
 800403c:	6803      	ldr	r3, [r0, #0]
 800403e:	4601      	mov	r1, r0
 8004040:	f013 0207 	ands.w	r2, r3, #7
 8004044:	d00b      	beq.n	800405e <__lo0bits+0x22>
 8004046:	07da      	lsls	r2, r3, #31
 8004048:	d423      	bmi.n	8004092 <__lo0bits+0x56>
 800404a:	0798      	lsls	r0, r3, #30
 800404c:	bf49      	itett	mi
 800404e:	085b      	lsrmi	r3, r3, #1
 8004050:	089b      	lsrpl	r3, r3, #2
 8004052:	2001      	movmi	r0, #1
 8004054:	600b      	strmi	r3, [r1, #0]
 8004056:	bf5c      	itt	pl
 8004058:	600b      	strpl	r3, [r1, #0]
 800405a:	2002      	movpl	r0, #2
 800405c:	4770      	bx	lr
 800405e:	b298      	uxth	r0, r3
 8004060:	b9a8      	cbnz	r0, 800408e <__lo0bits+0x52>
 8004062:	2010      	movs	r0, #16
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	f013 0fff 	tst.w	r3, #255	; 0xff
 800406a:	bf04      	itt	eq
 800406c:	0a1b      	lsreq	r3, r3, #8
 800406e:	3008      	addeq	r0, #8
 8004070:	071a      	lsls	r2, r3, #28
 8004072:	bf04      	itt	eq
 8004074:	091b      	lsreq	r3, r3, #4
 8004076:	3004      	addeq	r0, #4
 8004078:	079a      	lsls	r2, r3, #30
 800407a:	bf04      	itt	eq
 800407c:	089b      	lsreq	r3, r3, #2
 800407e:	3002      	addeq	r0, #2
 8004080:	07da      	lsls	r2, r3, #31
 8004082:	d402      	bmi.n	800408a <__lo0bits+0x4e>
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	d006      	beq.n	8004096 <__lo0bits+0x5a>
 8004088:	3001      	adds	r0, #1
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	4770      	bx	lr
 800408e:	4610      	mov	r0, r2
 8004090:	e7e9      	b.n	8004066 <__lo0bits+0x2a>
 8004092:	2000      	movs	r0, #0
 8004094:	4770      	bx	lr
 8004096:	2020      	movs	r0, #32
 8004098:	4770      	bx	lr

0800409a <__i2b>:
 800409a:	b510      	push	{r4, lr}
 800409c:	460c      	mov	r4, r1
 800409e:	2101      	movs	r1, #1
 80040a0:	f7ff ff27 	bl	8003ef2 <_Balloc>
 80040a4:	2201      	movs	r2, #1
 80040a6:	6144      	str	r4, [r0, #20]
 80040a8:	6102      	str	r2, [r0, #16]
 80040aa:	bd10      	pop	{r4, pc}

080040ac <__multiply>:
 80040ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	4614      	mov	r4, r2
 80040b2:	690a      	ldr	r2, [r1, #16]
 80040b4:	6923      	ldr	r3, [r4, #16]
 80040b6:	4688      	mov	r8, r1
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bfbe      	ittt	lt
 80040bc:	460b      	movlt	r3, r1
 80040be:	46a0      	movlt	r8, r4
 80040c0:	461c      	movlt	r4, r3
 80040c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80040c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80040ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80040ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80040d2:	eb07 0609 	add.w	r6, r7, r9
 80040d6:	42b3      	cmp	r3, r6
 80040d8:	bfb8      	it	lt
 80040da:	3101      	addlt	r1, #1
 80040dc:	f7ff ff09 	bl	8003ef2 <_Balloc>
 80040e0:	f100 0514 	add.w	r5, r0, #20
 80040e4:	462b      	mov	r3, r5
 80040e6:	2200      	movs	r2, #0
 80040e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80040ec:	4573      	cmp	r3, lr
 80040ee:	d316      	bcc.n	800411e <__multiply+0x72>
 80040f0:	f104 0214 	add.w	r2, r4, #20
 80040f4:	f108 0114 	add.w	r1, r8, #20
 80040f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80040fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	9b00      	ldr	r3, [sp, #0]
 8004104:	9201      	str	r2, [sp, #4]
 8004106:	4293      	cmp	r3, r2
 8004108:	d80c      	bhi.n	8004124 <__multiply+0x78>
 800410a:	2e00      	cmp	r6, #0
 800410c:	dd03      	ble.n	8004116 <__multiply+0x6a>
 800410e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004112:	2b00      	cmp	r3, #0
 8004114:	d05d      	beq.n	80041d2 <__multiply+0x126>
 8004116:	6106      	str	r6, [r0, #16]
 8004118:	b003      	add	sp, #12
 800411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800411e:	f843 2b04 	str.w	r2, [r3], #4
 8004122:	e7e3      	b.n	80040ec <__multiply+0x40>
 8004124:	f8b2 b000 	ldrh.w	fp, [r2]
 8004128:	f1bb 0f00 	cmp.w	fp, #0
 800412c:	d023      	beq.n	8004176 <__multiply+0xca>
 800412e:	4689      	mov	r9, r1
 8004130:	46ac      	mov	ip, r5
 8004132:	f04f 0800 	mov.w	r8, #0
 8004136:	f859 4b04 	ldr.w	r4, [r9], #4
 800413a:	f8dc a000 	ldr.w	sl, [ip]
 800413e:	b2a3      	uxth	r3, r4
 8004140:	fa1f fa8a 	uxth.w	sl, sl
 8004144:	fb0b a303 	mla	r3, fp, r3, sl
 8004148:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800414c:	f8dc 4000 	ldr.w	r4, [ip]
 8004150:	4443      	add	r3, r8
 8004152:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004156:	fb0b 840a 	mla	r4, fp, sl, r8
 800415a:	46e2      	mov	sl, ip
 800415c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004160:	b29b      	uxth	r3, r3
 8004162:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004166:	454f      	cmp	r7, r9
 8004168:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800416c:	f84a 3b04 	str.w	r3, [sl], #4
 8004170:	d82b      	bhi.n	80041ca <__multiply+0x11e>
 8004172:	f8cc 8004 	str.w	r8, [ip, #4]
 8004176:	9b01      	ldr	r3, [sp, #4]
 8004178:	3204      	adds	r2, #4
 800417a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800417e:	f1ba 0f00 	cmp.w	sl, #0
 8004182:	d020      	beq.n	80041c6 <__multiply+0x11a>
 8004184:	4689      	mov	r9, r1
 8004186:	46a8      	mov	r8, r5
 8004188:	f04f 0b00 	mov.w	fp, #0
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	f8b9 c000 	ldrh.w	ip, [r9]
 8004192:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004196:	b29b      	uxth	r3, r3
 8004198:	fb0a 440c 	mla	r4, sl, ip, r4
 800419c:	46c4      	mov	ip, r8
 800419e:	445c      	add	r4, fp
 80041a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80041a4:	f84c 3b04 	str.w	r3, [ip], #4
 80041a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80041ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	fb0a b303 	mla	r3, sl, r3, fp
 80041b6:	454f      	cmp	r7, r9
 80041b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80041bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80041c0:	d805      	bhi.n	80041ce <__multiply+0x122>
 80041c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80041c6:	3504      	adds	r5, #4
 80041c8:	e79b      	b.n	8004102 <__multiply+0x56>
 80041ca:	46d4      	mov	ip, sl
 80041cc:	e7b3      	b.n	8004136 <__multiply+0x8a>
 80041ce:	46e0      	mov	r8, ip
 80041d0:	e7dd      	b.n	800418e <__multiply+0xe2>
 80041d2:	3e01      	subs	r6, #1
 80041d4:	e799      	b.n	800410a <__multiply+0x5e>
	...

080041d8 <__pow5mult>:
 80041d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041dc:	4615      	mov	r5, r2
 80041de:	f012 0203 	ands.w	r2, r2, #3
 80041e2:	4606      	mov	r6, r0
 80041e4:	460f      	mov	r7, r1
 80041e6:	d007      	beq.n	80041f8 <__pow5mult+0x20>
 80041e8:	4c21      	ldr	r4, [pc, #132]	; (8004270 <__pow5mult+0x98>)
 80041ea:	3a01      	subs	r2, #1
 80041ec:	2300      	movs	r3, #0
 80041ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041f2:	f7ff fec9 	bl	8003f88 <__multadd>
 80041f6:	4607      	mov	r7, r0
 80041f8:	10ad      	asrs	r5, r5, #2
 80041fa:	d035      	beq.n	8004268 <__pow5mult+0x90>
 80041fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80041fe:	b93c      	cbnz	r4, 8004210 <__pow5mult+0x38>
 8004200:	2010      	movs	r0, #16
 8004202:	f7ff fe55 	bl	8003eb0 <malloc>
 8004206:	6270      	str	r0, [r6, #36]	; 0x24
 8004208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800420c:	6004      	str	r4, [r0, #0]
 800420e:	60c4      	str	r4, [r0, #12]
 8004210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004218:	b94c      	cbnz	r4, 800422e <__pow5mult+0x56>
 800421a:	f240 2171 	movw	r1, #625	; 0x271
 800421e:	4630      	mov	r0, r6
 8004220:	f7ff ff3b 	bl	800409a <__i2b>
 8004224:	2300      	movs	r3, #0
 8004226:	4604      	mov	r4, r0
 8004228:	f8c8 0008 	str.w	r0, [r8, #8]
 800422c:	6003      	str	r3, [r0, #0]
 800422e:	f04f 0800 	mov.w	r8, #0
 8004232:	07eb      	lsls	r3, r5, #31
 8004234:	d50a      	bpl.n	800424c <__pow5mult+0x74>
 8004236:	4639      	mov	r1, r7
 8004238:	4622      	mov	r2, r4
 800423a:	4630      	mov	r0, r6
 800423c:	f7ff ff36 	bl	80040ac <__multiply>
 8004240:	4681      	mov	r9, r0
 8004242:	4639      	mov	r1, r7
 8004244:	4630      	mov	r0, r6
 8004246:	f7ff fe88 	bl	8003f5a <_Bfree>
 800424a:	464f      	mov	r7, r9
 800424c:	106d      	asrs	r5, r5, #1
 800424e:	d00b      	beq.n	8004268 <__pow5mult+0x90>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	b938      	cbnz	r0, 8004264 <__pow5mult+0x8c>
 8004254:	4622      	mov	r2, r4
 8004256:	4621      	mov	r1, r4
 8004258:	4630      	mov	r0, r6
 800425a:	f7ff ff27 	bl	80040ac <__multiply>
 800425e:	6020      	str	r0, [r4, #0]
 8004260:	f8c0 8000 	str.w	r8, [r0]
 8004264:	4604      	mov	r4, r0
 8004266:	e7e4      	b.n	8004232 <__pow5mult+0x5a>
 8004268:	4638      	mov	r0, r7
 800426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800426e:	bf00      	nop
 8004270:	08005000 	.word	0x08005000

08004274 <__lshift>:
 8004274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	460c      	mov	r4, r1
 800427a:	4607      	mov	r7, r0
 800427c:	4616      	mov	r6, r2
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004284:	eb0a 0903 	add.w	r9, sl, r3
 8004288:	6849      	ldr	r1, [r1, #4]
 800428a:	68a3      	ldr	r3, [r4, #8]
 800428c:	f109 0501 	add.w	r5, r9, #1
 8004290:	42ab      	cmp	r3, r5
 8004292:	db32      	blt.n	80042fa <__lshift+0x86>
 8004294:	4638      	mov	r0, r7
 8004296:	f7ff fe2c 	bl	8003ef2 <_Balloc>
 800429a:	2300      	movs	r3, #0
 800429c:	4680      	mov	r8, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	f100 0114 	add.w	r1, r0, #20
 80042a4:	4553      	cmp	r3, sl
 80042a6:	db2b      	blt.n	8004300 <__lshift+0x8c>
 80042a8:	6920      	ldr	r0, [r4, #16]
 80042aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80042ae:	f104 0314 	add.w	r3, r4, #20
 80042b2:	f016 021f 	ands.w	r2, r6, #31
 80042b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80042ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80042be:	d025      	beq.n	800430c <__lshift+0x98>
 80042c0:	2000      	movs	r0, #0
 80042c2:	f1c2 0e20 	rsb	lr, r2, #32
 80042c6:	468a      	mov	sl, r1
 80042c8:	681e      	ldr	r6, [r3, #0]
 80042ca:	4096      	lsls	r6, r2
 80042cc:	4330      	orrs	r0, r6
 80042ce:	f84a 0b04 	str.w	r0, [sl], #4
 80042d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80042d6:	459c      	cmp	ip, r3
 80042d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80042dc:	d814      	bhi.n	8004308 <__lshift+0x94>
 80042de:	6048      	str	r0, [r1, #4]
 80042e0:	b108      	cbz	r0, 80042e6 <__lshift+0x72>
 80042e2:	f109 0502 	add.w	r5, r9, #2
 80042e6:	3d01      	subs	r5, #1
 80042e8:	4638      	mov	r0, r7
 80042ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80042ee:	4621      	mov	r1, r4
 80042f0:	f7ff fe33 	bl	8003f5a <_Bfree>
 80042f4:	4640      	mov	r0, r8
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	3101      	adds	r1, #1
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	e7c7      	b.n	8004290 <__lshift+0x1c>
 8004300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004304:	3301      	adds	r3, #1
 8004306:	e7cd      	b.n	80042a4 <__lshift+0x30>
 8004308:	4651      	mov	r1, sl
 800430a:	e7dc      	b.n	80042c6 <__lshift+0x52>
 800430c:	3904      	subs	r1, #4
 800430e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004312:	459c      	cmp	ip, r3
 8004314:	f841 2f04 	str.w	r2, [r1, #4]!
 8004318:	d8f9      	bhi.n	800430e <__lshift+0x9a>
 800431a:	e7e4      	b.n	80042e6 <__lshift+0x72>

0800431c <__mcmp>:
 800431c:	6903      	ldr	r3, [r0, #16]
 800431e:	690a      	ldr	r2, [r1, #16]
 8004320:	b530      	push	{r4, r5, lr}
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	d10c      	bne.n	8004340 <__mcmp+0x24>
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	3014      	adds	r0, #20
 800432a:	3114      	adds	r1, #20
 800432c:	1884      	adds	r4, r0, r2
 800432e:	4411      	add	r1, r2
 8004330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004338:	4295      	cmp	r5, r2
 800433a:	d003      	beq.n	8004344 <__mcmp+0x28>
 800433c:	d305      	bcc.n	800434a <__mcmp+0x2e>
 800433e:	2301      	movs	r3, #1
 8004340:	4618      	mov	r0, r3
 8004342:	bd30      	pop	{r4, r5, pc}
 8004344:	42a0      	cmp	r0, r4
 8004346:	d3f3      	bcc.n	8004330 <__mcmp+0x14>
 8004348:	e7fa      	b.n	8004340 <__mcmp+0x24>
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
 800434e:	e7f7      	b.n	8004340 <__mcmp+0x24>

08004350 <__mdiff>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	460d      	mov	r5, r1
 8004356:	4607      	mov	r7, r0
 8004358:	4611      	mov	r1, r2
 800435a:	4628      	mov	r0, r5
 800435c:	4614      	mov	r4, r2
 800435e:	f7ff ffdd 	bl	800431c <__mcmp>
 8004362:	1e06      	subs	r6, r0, #0
 8004364:	d108      	bne.n	8004378 <__mdiff+0x28>
 8004366:	4631      	mov	r1, r6
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff fdc2 	bl	8003ef2 <_Balloc>
 800436e:	2301      	movs	r3, #1
 8004370:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	bfa4      	itt	ge
 800437a:	4623      	movge	r3, r4
 800437c:	462c      	movge	r4, r5
 800437e:	4638      	mov	r0, r7
 8004380:	6861      	ldr	r1, [r4, #4]
 8004382:	bfa6      	itte	ge
 8004384:	461d      	movge	r5, r3
 8004386:	2600      	movge	r6, #0
 8004388:	2601      	movlt	r6, #1
 800438a:	f7ff fdb2 	bl	8003ef2 <_Balloc>
 800438e:	f04f 0e00 	mov.w	lr, #0
 8004392:	60c6      	str	r6, [r0, #12]
 8004394:	692b      	ldr	r3, [r5, #16]
 8004396:	6926      	ldr	r6, [r4, #16]
 8004398:	f104 0214 	add.w	r2, r4, #20
 800439c:	f105 0914 	add.w	r9, r5, #20
 80043a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80043a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80043a8:	f100 0114 	add.w	r1, r0, #20
 80043ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80043b0:	f859 5b04 	ldr.w	r5, [r9], #4
 80043b4:	fa1f f38a 	uxth.w	r3, sl
 80043b8:	4473      	add	r3, lr
 80043ba:	b2ac      	uxth	r4, r5
 80043bc:	1b1b      	subs	r3, r3, r4
 80043be:	0c2c      	lsrs	r4, r5, #16
 80043c0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80043c4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80043ce:	45c8      	cmp	r8, r9
 80043d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80043d4:	4694      	mov	ip, r2
 80043d6:	f841 4b04 	str.w	r4, [r1], #4
 80043da:	d8e7      	bhi.n	80043ac <__mdiff+0x5c>
 80043dc:	45bc      	cmp	ip, r7
 80043de:	d304      	bcc.n	80043ea <__mdiff+0x9a>
 80043e0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80043e4:	b183      	cbz	r3, 8004408 <__mdiff+0xb8>
 80043e6:	6106      	str	r6, [r0, #16]
 80043e8:	e7c4      	b.n	8004374 <__mdiff+0x24>
 80043ea:	f85c 4b04 	ldr.w	r4, [ip], #4
 80043ee:	b2a2      	uxth	r2, r4
 80043f0:	4472      	add	r2, lr
 80043f2:	1413      	asrs	r3, r2, #16
 80043f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80043f8:	b292      	uxth	r2, r2
 80043fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80043fe:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004402:	f841 2b04 	str.w	r2, [r1], #4
 8004406:	e7e9      	b.n	80043dc <__mdiff+0x8c>
 8004408:	3e01      	subs	r6, #1
 800440a:	e7e9      	b.n	80043e0 <__mdiff+0x90>

0800440c <__d2b>:
 800440c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004410:	461c      	mov	r4, r3
 8004412:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004416:	2101      	movs	r1, #1
 8004418:	4690      	mov	r8, r2
 800441a:	f7ff fd6a 	bl	8003ef2 <_Balloc>
 800441e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004422:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004426:	4607      	mov	r7, r0
 8004428:	bb34      	cbnz	r4, 8004478 <__d2b+0x6c>
 800442a:	9201      	str	r2, [sp, #4]
 800442c:	f1b8 0200 	subs.w	r2, r8, #0
 8004430:	d027      	beq.n	8004482 <__d2b+0x76>
 8004432:	a802      	add	r0, sp, #8
 8004434:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004438:	f7ff fe00 	bl	800403c <__lo0bits>
 800443c:	9900      	ldr	r1, [sp, #0]
 800443e:	b1f0      	cbz	r0, 800447e <__d2b+0x72>
 8004440:	9a01      	ldr	r2, [sp, #4]
 8004442:	f1c0 0320 	rsb	r3, r0, #32
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	430b      	orrs	r3, r1
 800444c:	40c2      	lsrs	r2, r0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	9201      	str	r2, [sp, #4]
 8004452:	9b01      	ldr	r3, [sp, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf14      	ite	ne
 8004458:	2102      	movne	r1, #2
 800445a:	2101      	moveq	r1, #1
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	6139      	str	r1, [r7, #16]
 8004460:	b1c4      	cbz	r4, 8004494 <__d2b+0x88>
 8004462:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004466:	4404      	add	r4, r0
 8004468:	6034      	str	r4, [r6, #0]
 800446a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800446e:	6028      	str	r0, [r5, #0]
 8004470:	4638      	mov	r0, r7
 8004472:	b002      	add	sp, #8
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004478:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800447c:	e7d5      	b.n	800442a <__d2b+0x1e>
 800447e:	6179      	str	r1, [r7, #20]
 8004480:	e7e7      	b.n	8004452 <__d2b+0x46>
 8004482:	a801      	add	r0, sp, #4
 8004484:	f7ff fdda 	bl	800403c <__lo0bits>
 8004488:	2101      	movs	r1, #1
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	6139      	str	r1, [r7, #16]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	3020      	adds	r0, #32
 8004492:	e7e5      	b.n	8004460 <__d2b+0x54>
 8004494:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004498:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800449c:	6030      	str	r0, [r6, #0]
 800449e:	6918      	ldr	r0, [r3, #16]
 80044a0:	f7ff fdad 	bl	8003ffe <__hi0bits>
 80044a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80044a8:	e7e1      	b.n	800446e <__d2b+0x62>

080044aa <_calloc_r>:
 80044aa:	b538      	push	{r3, r4, r5, lr}
 80044ac:	fb02 f401 	mul.w	r4, r2, r1
 80044b0:	4621      	mov	r1, r4
 80044b2:	f000 f855 	bl	8004560 <_malloc_r>
 80044b6:	4605      	mov	r5, r0
 80044b8:	b118      	cbz	r0, 80044c2 <_calloc_r+0x18>
 80044ba:	4622      	mov	r2, r4
 80044bc:	2100      	movs	r1, #0
 80044be:	f7fe f96b 	bl	8002798 <memset>
 80044c2:	4628      	mov	r0, r5
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080044c8 <_free_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4605      	mov	r5, r0
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d043      	beq.n	8004558 <_free_r+0x90>
 80044d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d4:	1f0c      	subs	r4, r1, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bfb8      	it	lt
 80044da:	18e4      	addlt	r4, r4, r3
 80044dc:	f000 fc46 	bl	8004d6c <__malloc_lock>
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <_free_r+0x94>)
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	4610      	mov	r0, r2
 80044e6:	b933      	cbnz	r3, 80044f6 <_free_r+0x2e>
 80044e8:	6063      	str	r3, [r4, #4]
 80044ea:	6014      	str	r4, [r2, #0]
 80044ec:	4628      	mov	r0, r5
 80044ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044f2:	f000 bc3c 	b.w	8004d6e <__malloc_unlock>
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	d90b      	bls.n	8004512 <_free_r+0x4a>
 80044fa:	6821      	ldr	r1, [r4, #0]
 80044fc:	1862      	adds	r2, r4, r1
 80044fe:	4293      	cmp	r3, r2
 8004500:	bf01      	itttt	eq
 8004502:	681a      	ldreq	r2, [r3, #0]
 8004504:	685b      	ldreq	r3, [r3, #4]
 8004506:	1852      	addeq	r2, r2, r1
 8004508:	6022      	streq	r2, [r4, #0]
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	6004      	str	r4, [r0, #0]
 800450e:	e7ed      	b.n	80044ec <_free_r+0x24>
 8004510:	4613      	mov	r3, r2
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	b10a      	cbz	r2, 800451a <_free_r+0x52>
 8004516:	42a2      	cmp	r2, r4
 8004518:	d9fa      	bls.n	8004510 <_free_r+0x48>
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	1858      	adds	r0, r3, r1
 800451e:	42a0      	cmp	r0, r4
 8004520:	d10b      	bne.n	800453a <_free_r+0x72>
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	4401      	add	r1, r0
 8004526:	1858      	adds	r0, r3, r1
 8004528:	4282      	cmp	r2, r0
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	d1de      	bne.n	80044ec <_free_r+0x24>
 800452e:	6810      	ldr	r0, [r2, #0]
 8004530:	6852      	ldr	r2, [r2, #4]
 8004532:	4401      	add	r1, r0
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	605a      	str	r2, [r3, #4]
 8004538:	e7d8      	b.n	80044ec <_free_r+0x24>
 800453a:	d902      	bls.n	8004542 <_free_r+0x7a>
 800453c:	230c      	movs	r3, #12
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	e7d4      	b.n	80044ec <_free_r+0x24>
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	1821      	adds	r1, r4, r0
 8004546:	428a      	cmp	r2, r1
 8004548:	bf01      	itttt	eq
 800454a:	6811      	ldreq	r1, [r2, #0]
 800454c:	6852      	ldreq	r2, [r2, #4]
 800454e:	1809      	addeq	r1, r1, r0
 8004550:	6021      	streq	r1, [r4, #0]
 8004552:	6062      	str	r2, [r4, #4]
 8004554:	605c      	str	r4, [r3, #4]
 8004556:	e7c9      	b.n	80044ec <_free_r+0x24>
 8004558:	bd38      	pop	{r3, r4, r5, pc}
 800455a:	bf00      	nop
 800455c:	20000208 	.word	0x20000208

08004560 <_malloc_r>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	1ccd      	adds	r5, r1, #3
 8004564:	f025 0503 	bic.w	r5, r5, #3
 8004568:	3508      	adds	r5, #8
 800456a:	2d0c      	cmp	r5, #12
 800456c:	bf38      	it	cc
 800456e:	250c      	movcc	r5, #12
 8004570:	2d00      	cmp	r5, #0
 8004572:	4606      	mov	r6, r0
 8004574:	db01      	blt.n	800457a <_malloc_r+0x1a>
 8004576:	42a9      	cmp	r1, r5
 8004578:	d903      	bls.n	8004582 <_malloc_r+0x22>
 800457a:	230c      	movs	r3, #12
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	2000      	movs	r0, #0
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	f000 fbf3 	bl	8004d6c <__malloc_lock>
 8004586:	4a21      	ldr	r2, [pc, #132]	; (800460c <_malloc_r+0xac>)
 8004588:	6814      	ldr	r4, [r2, #0]
 800458a:	4621      	mov	r1, r4
 800458c:	b991      	cbnz	r1, 80045b4 <_malloc_r+0x54>
 800458e:	4c20      	ldr	r4, [pc, #128]	; (8004610 <_malloc_r+0xb0>)
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	b91b      	cbnz	r3, 800459c <_malloc_r+0x3c>
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f97b 	bl	8004890 <_sbrk_r>
 800459a:	6020      	str	r0, [r4, #0]
 800459c:	4629      	mov	r1, r5
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f976 	bl	8004890 <_sbrk_r>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d124      	bne.n	80045f2 <_malloc_r+0x92>
 80045a8:	230c      	movs	r3, #12
 80045aa:	4630      	mov	r0, r6
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	f000 fbde 	bl	8004d6e <__malloc_unlock>
 80045b2:	e7e4      	b.n	800457e <_malloc_r+0x1e>
 80045b4:	680b      	ldr	r3, [r1, #0]
 80045b6:	1b5b      	subs	r3, r3, r5
 80045b8:	d418      	bmi.n	80045ec <_malloc_r+0x8c>
 80045ba:	2b0b      	cmp	r3, #11
 80045bc:	d90f      	bls.n	80045de <_malloc_r+0x7e>
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	18cc      	adds	r4, r1, r3
 80045c2:	50cd      	str	r5, [r1, r3]
 80045c4:	4630      	mov	r0, r6
 80045c6:	f000 fbd2 	bl	8004d6e <__malloc_unlock>
 80045ca:	f104 000b 	add.w	r0, r4, #11
 80045ce:	1d23      	adds	r3, r4, #4
 80045d0:	f020 0007 	bic.w	r0, r0, #7
 80045d4:	1ac3      	subs	r3, r0, r3
 80045d6:	d0d3      	beq.n	8004580 <_malloc_r+0x20>
 80045d8:	425a      	negs	r2, r3
 80045da:	50e2      	str	r2, [r4, r3]
 80045dc:	e7d0      	b.n	8004580 <_malloc_r+0x20>
 80045de:	684b      	ldr	r3, [r1, #4]
 80045e0:	428c      	cmp	r4, r1
 80045e2:	bf16      	itet	ne
 80045e4:	6063      	strne	r3, [r4, #4]
 80045e6:	6013      	streq	r3, [r2, #0]
 80045e8:	460c      	movne	r4, r1
 80045ea:	e7eb      	b.n	80045c4 <_malloc_r+0x64>
 80045ec:	460c      	mov	r4, r1
 80045ee:	6849      	ldr	r1, [r1, #4]
 80045f0:	e7cc      	b.n	800458c <_malloc_r+0x2c>
 80045f2:	1cc4      	adds	r4, r0, #3
 80045f4:	f024 0403 	bic.w	r4, r4, #3
 80045f8:	42a0      	cmp	r0, r4
 80045fa:	d005      	beq.n	8004608 <_malloc_r+0xa8>
 80045fc:	1a21      	subs	r1, r4, r0
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 f946 	bl	8004890 <_sbrk_r>
 8004604:	3001      	adds	r0, #1
 8004606:	d0cf      	beq.n	80045a8 <_malloc_r+0x48>
 8004608:	6025      	str	r5, [r4, #0]
 800460a:	e7db      	b.n	80045c4 <_malloc_r+0x64>
 800460c:	20000208 	.word	0x20000208
 8004610:	2000020c 	.word	0x2000020c

08004614 <__sfputc_r>:
 8004614:	6893      	ldr	r3, [r2, #8]
 8004616:	b410      	push	{r4}
 8004618:	3b01      	subs	r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	da07      	bge.n	8004630 <__sfputc_r+0x1c>
 8004620:	6994      	ldr	r4, [r2, #24]
 8004622:	42a3      	cmp	r3, r4
 8004624:	db01      	blt.n	800462a <__sfputc_r+0x16>
 8004626:	290a      	cmp	r1, #10
 8004628:	d102      	bne.n	8004630 <__sfputc_r+0x1c>
 800462a:	bc10      	pop	{r4}
 800462c:	f000 b984 	b.w	8004938 <__swbuf_r>
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	1c58      	adds	r0, r3, #1
 8004634:	6010      	str	r0, [r2, #0]
 8004636:	7019      	strb	r1, [r3, #0]
 8004638:	4608      	mov	r0, r1
 800463a:	bc10      	pop	{r4}
 800463c:	4770      	bx	lr

0800463e <__sfputs_r>:
 800463e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004640:	4606      	mov	r6, r0
 8004642:	460f      	mov	r7, r1
 8004644:	4614      	mov	r4, r2
 8004646:	18d5      	adds	r5, r2, r3
 8004648:	42ac      	cmp	r4, r5
 800464a:	d101      	bne.n	8004650 <__sfputs_r+0x12>
 800464c:	2000      	movs	r0, #0
 800464e:	e007      	b.n	8004660 <__sfputs_r+0x22>
 8004650:	463a      	mov	r2, r7
 8004652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004656:	4630      	mov	r0, r6
 8004658:	f7ff ffdc 	bl	8004614 <__sfputc_r>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d1f3      	bne.n	8004648 <__sfputs_r+0xa>
 8004660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004664 <_vfiprintf_r>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	460c      	mov	r4, r1
 800466a:	b09d      	sub	sp, #116	; 0x74
 800466c:	4617      	mov	r7, r2
 800466e:	461d      	mov	r5, r3
 8004670:	4606      	mov	r6, r0
 8004672:	b118      	cbz	r0, 800467c <_vfiprintf_r+0x18>
 8004674:	6983      	ldr	r3, [r0, #24]
 8004676:	b90b      	cbnz	r3, 800467c <_vfiprintf_r+0x18>
 8004678:	f7ff fb82 	bl	8003d80 <__sinit>
 800467c:	4b7c      	ldr	r3, [pc, #496]	; (8004870 <_vfiprintf_r+0x20c>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d158      	bne.n	8004734 <_vfiprintf_r+0xd0>
 8004682:	6874      	ldr	r4, [r6, #4]
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	0718      	lsls	r0, r3, #28
 8004688:	d55e      	bpl.n	8004748 <_vfiprintf_r+0xe4>
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05b      	beq.n	8004748 <_vfiprintf_r+0xe4>
 8004690:	2300      	movs	r3, #0
 8004692:	9309      	str	r3, [sp, #36]	; 0x24
 8004694:	2320      	movs	r3, #32
 8004696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800469a:	2330      	movs	r3, #48	; 0x30
 800469c:	f04f 0b01 	mov.w	fp, #1
 80046a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046a4:	9503      	str	r5, [sp, #12]
 80046a6:	46b8      	mov	r8, r7
 80046a8:	4645      	mov	r5, r8
 80046aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046ae:	b10b      	cbz	r3, 80046b4 <_vfiprintf_r+0x50>
 80046b0:	2b25      	cmp	r3, #37	; 0x25
 80046b2:	d154      	bne.n	800475e <_vfiprintf_r+0xfa>
 80046b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80046b8:	d00b      	beq.n	80046d2 <_vfiprintf_r+0x6e>
 80046ba:	4653      	mov	r3, sl
 80046bc:	463a      	mov	r2, r7
 80046be:	4621      	mov	r1, r4
 80046c0:	4630      	mov	r0, r6
 80046c2:	f7ff ffbc 	bl	800463e <__sfputs_r>
 80046c6:	3001      	adds	r0, #1
 80046c8:	f000 80c2 	beq.w	8004850 <_vfiprintf_r+0x1ec>
 80046cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ce:	4453      	add	r3, sl
 80046d0:	9309      	str	r3, [sp, #36]	; 0x24
 80046d2:	f898 3000 	ldrb.w	r3, [r8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80ba 	beq.w	8004850 <_vfiprintf_r+0x1ec>
 80046dc:	2300      	movs	r3, #0
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ee:	931a      	str	r3, [sp, #104]	; 0x68
 80046f0:	46a8      	mov	r8, r5
 80046f2:	2205      	movs	r2, #5
 80046f4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80046f8:	485e      	ldr	r0, [pc, #376]	; (8004874 <_vfiprintf_r+0x210>)
 80046fa:	f7ff fbe1 	bl	8003ec0 <memchr>
 80046fe:	9b04      	ldr	r3, [sp, #16]
 8004700:	bb78      	cbnz	r0, 8004762 <_vfiprintf_r+0xfe>
 8004702:	06d9      	lsls	r1, r3, #27
 8004704:	bf44      	itt	mi
 8004706:	2220      	movmi	r2, #32
 8004708:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800470c:	071a      	lsls	r2, r3, #28
 800470e:	bf44      	itt	mi
 8004710:	222b      	movmi	r2, #43	; 0x2b
 8004712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004716:	782a      	ldrb	r2, [r5, #0]
 8004718:	2a2a      	cmp	r2, #42	; 0x2a
 800471a:	d02a      	beq.n	8004772 <_vfiprintf_r+0x10e>
 800471c:	46a8      	mov	r8, r5
 800471e:	2000      	movs	r0, #0
 8004720:	250a      	movs	r5, #10
 8004722:	9a07      	ldr	r2, [sp, #28]
 8004724:	4641      	mov	r1, r8
 8004726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472a:	3b30      	subs	r3, #48	; 0x30
 800472c:	2b09      	cmp	r3, #9
 800472e:	d969      	bls.n	8004804 <_vfiprintf_r+0x1a0>
 8004730:	b360      	cbz	r0, 800478c <_vfiprintf_r+0x128>
 8004732:	e024      	b.n	800477e <_vfiprintf_r+0x11a>
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <_vfiprintf_r+0x214>)
 8004736:	429c      	cmp	r4, r3
 8004738:	d101      	bne.n	800473e <_vfiprintf_r+0xda>
 800473a:	68b4      	ldr	r4, [r6, #8]
 800473c:	e7a2      	b.n	8004684 <_vfiprintf_r+0x20>
 800473e:	4b4f      	ldr	r3, [pc, #316]	; (800487c <_vfiprintf_r+0x218>)
 8004740:	429c      	cmp	r4, r3
 8004742:	bf08      	it	eq
 8004744:	68f4      	ldreq	r4, [r6, #12]
 8004746:	e79d      	b.n	8004684 <_vfiprintf_r+0x20>
 8004748:	4621      	mov	r1, r4
 800474a:	4630      	mov	r0, r6
 800474c:	f000 f958 	bl	8004a00 <__swsetup_r>
 8004750:	2800      	cmp	r0, #0
 8004752:	d09d      	beq.n	8004690 <_vfiprintf_r+0x2c>
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	b01d      	add	sp, #116	; 0x74
 800475a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475e:	46a8      	mov	r8, r5
 8004760:	e7a2      	b.n	80046a8 <_vfiprintf_r+0x44>
 8004762:	4a44      	ldr	r2, [pc, #272]	; (8004874 <_vfiprintf_r+0x210>)
 8004764:	4645      	mov	r5, r8
 8004766:	1a80      	subs	r0, r0, r2
 8004768:	fa0b f000 	lsl.w	r0, fp, r0
 800476c:	4318      	orrs	r0, r3
 800476e:	9004      	str	r0, [sp, #16]
 8004770:	e7be      	b.n	80046f0 <_vfiprintf_r+0x8c>
 8004772:	9a03      	ldr	r2, [sp, #12]
 8004774:	1d11      	adds	r1, r2, #4
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	9103      	str	r1, [sp, #12]
 800477a:	2a00      	cmp	r2, #0
 800477c:	db01      	blt.n	8004782 <_vfiprintf_r+0x11e>
 800477e:	9207      	str	r2, [sp, #28]
 8004780:	e004      	b.n	800478c <_vfiprintf_r+0x128>
 8004782:	4252      	negs	r2, r2
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	9207      	str	r2, [sp, #28]
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	f898 3000 	ldrb.w	r3, [r8]
 8004790:	2b2e      	cmp	r3, #46	; 0x2e
 8004792:	d10e      	bne.n	80047b2 <_vfiprintf_r+0x14e>
 8004794:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004798:	2b2a      	cmp	r3, #42	; 0x2a
 800479a:	d138      	bne.n	800480e <_vfiprintf_r+0x1aa>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	f108 0802 	add.w	r8, r8, #2
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9203      	str	r2, [sp, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bfb8      	it	lt
 80047ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80047b0:	9305      	str	r3, [sp, #20]
 80047b2:	4d33      	ldr	r5, [pc, #204]	; (8004880 <_vfiprintf_r+0x21c>)
 80047b4:	2203      	movs	r2, #3
 80047b6:	f898 1000 	ldrb.w	r1, [r8]
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7ff fb80 	bl	8003ec0 <memchr>
 80047c0:	b140      	cbz	r0, 80047d4 <_vfiprintf_r+0x170>
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	1b40      	subs	r0, r0, r5
 80047c6:	fa03 f000 	lsl.w	r0, r3, r0
 80047ca:	9b04      	ldr	r3, [sp, #16]
 80047cc:	f108 0801 	add.w	r8, r8, #1
 80047d0:	4303      	orrs	r3, r0
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	f898 1000 	ldrb.w	r1, [r8]
 80047d8:	2206      	movs	r2, #6
 80047da:	482a      	ldr	r0, [pc, #168]	; (8004884 <_vfiprintf_r+0x220>)
 80047dc:	f108 0701 	add.w	r7, r8, #1
 80047e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047e4:	f7ff fb6c 	bl	8003ec0 <memchr>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d037      	beq.n	800485c <_vfiprintf_r+0x1f8>
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <_vfiprintf_r+0x224>)
 80047ee:	bb1b      	cbnz	r3, 8004838 <_vfiprintf_r+0x1d4>
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	3307      	adds	r3, #7
 80047f4:	f023 0307 	bic.w	r3, r3, #7
 80047f8:	3308      	adds	r3, #8
 80047fa:	9303      	str	r3, [sp, #12]
 80047fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fe:	444b      	add	r3, r9
 8004800:	9309      	str	r3, [sp, #36]	; 0x24
 8004802:	e750      	b.n	80046a6 <_vfiprintf_r+0x42>
 8004804:	fb05 3202 	mla	r2, r5, r2, r3
 8004808:	2001      	movs	r0, #1
 800480a:	4688      	mov	r8, r1
 800480c:	e78a      	b.n	8004724 <_vfiprintf_r+0xc0>
 800480e:	2300      	movs	r3, #0
 8004810:	250a      	movs	r5, #10
 8004812:	4619      	mov	r1, r3
 8004814:	f108 0801 	add.w	r8, r8, #1
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	4640      	mov	r0, r8
 800481c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004820:	3a30      	subs	r2, #48	; 0x30
 8004822:	2a09      	cmp	r2, #9
 8004824:	d903      	bls.n	800482e <_vfiprintf_r+0x1ca>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0c3      	beq.n	80047b2 <_vfiprintf_r+0x14e>
 800482a:	9105      	str	r1, [sp, #20]
 800482c:	e7c1      	b.n	80047b2 <_vfiprintf_r+0x14e>
 800482e:	fb05 2101 	mla	r1, r5, r1, r2
 8004832:	2301      	movs	r3, #1
 8004834:	4680      	mov	r8, r0
 8004836:	e7f0      	b.n	800481a <_vfiprintf_r+0x1b6>
 8004838:	ab03      	add	r3, sp, #12
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4622      	mov	r2, r4
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <_vfiprintf_r+0x228>)
 8004840:	a904      	add	r1, sp, #16
 8004842:	4630      	mov	r0, r6
 8004844:	f7fe f842 	bl	80028cc <_printf_float>
 8004848:	f1b0 3fff 	cmp.w	r0, #4294967295
 800484c:	4681      	mov	r9, r0
 800484e:	d1d5      	bne.n	80047fc <_vfiprintf_r+0x198>
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	065b      	lsls	r3, r3, #25
 8004854:	f53f af7e 	bmi.w	8004754 <_vfiprintf_r+0xf0>
 8004858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800485a:	e77d      	b.n	8004758 <_vfiprintf_r+0xf4>
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4622      	mov	r2, r4
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <_vfiprintf_r+0x228>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4630      	mov	r0, r6
 8004868:	f7fe fadc 	bl	8002e24 <_printf_i>
 800486c:	e7ec      	b.n	8004848 <_vfiprintf_r+0x1e4>
 800486e:	bf00      	nop
 8004870:	08004ed0 	.word	0x08004ed0
 8004874:	0800500c 	.word	0x0800500c
 8004878:	08004ef0 	.word	0x08004ef0
 800487c:	08004eb0 	.word	0x08004eb0
 8004880:	08005012 	.word	0x08005012
 8004884:	08005016 	.word	0x08005016
 8004888:	080028cd 	.word	0x080028cd
 800488c:	0800463f 	.word	0x0800463f

08004890 <_sbrk_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	2300      	movs	r3, #0
 8004894:	4c05      	ldr	r4, [pc, #20]	; (80048ac <_sbrk_r+0x1c>)
 8004896:	4605      	mov	r5, r0
 8004898:	4608      	mov	r0, r1
 800489a:	6023      	str	r3, [r4, #0]
 800489c:	f7fc fca4 	bl	80011e8 <_sbrk>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_sbrk_r+0x1a>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_sbrk_r+0x1a>
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	200002b8 	.word	0x200002b8

080048b0 <__sread>:
 80048b0:	b510      	push	{r4, lr}
 80048b2:	460c      	mov	r4, r1
 80048b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b8:	f000 fa5a 	bl	8004d70 <_read_r>
 80048bc:	2800      	cmp	r0, #0
 80048be:	bfab      	itete	ge
 80048c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048c2:	89a3      	ldrhlt	r3, [r4, #12]
 80048c4:	181b      	addge	r3, r3, r0
 80048c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ca:	bfac      	ite	ge
 80048cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048ce:	81a3      	strhlt	r3, [r4, #12]
 80048d0:	bd10      	pop	{r4, pc}

080048d2 <__swrite>:
 80048d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	461f      	mov	r7, r3
 80048d8:	898b      	ldrh	r3, [r1, #12]
 80048da:	4605      	mov	r5, r0
 80048dc:	05db      	lsls	r3, r3, #23
 80048de:	460c      	mov	r4, r1
 80048e0:	4616      	mov	r6, r2
 80048e2:	d505      	bpl.n	80048f0 <__swrite+0x1e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	2200      	movs	r2, #0
 80048e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ec:	f000 f9b6 	bl	8004c5c <_lseek_r>
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	4632      	mov	r2, r6
 80048f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048fe:	463b      	mov	r3, r7
 8004900:	4628      	mov	r0, r5
 8004902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004906:	f000 b869 	b.w	80049dc <_write_r>

0800490a <__sseek>:
 800490a:	b510      	push	{r4, lr}
 800490c:	460c      	mov	r4, r1
 800490e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004912:	f000 f9a3 	bl	8004c5c <_lseek_r>
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	bf15      	itete	ne
 800491c:	6560      	strne	r0, [r4, #84]	; 0x54
 800491e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004926:	81a3      	strheq	r3, [r4, #12]
 8004928:	bf18      	it	ne
 800492a:	81a3      	strhne	r3, [r4, #12]
 800492c:	bd10      	pop	{r4, pc}

0800492e <__sclose>:
 800492e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004932:	f000 b8d3 	b.w	8004adc <_close_r>
	...

08004938 <__swbuf_r>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	460e      	mov	r6, r1
 800493c:	4614      	mov	r4, r2
 800493e:	4605      	mov	r5, r0
 8004940:	b118      	cbz	r0, 800494a <__swbuf_r+0x12>
 8004942:	6983      	ldr	r3, [r0, #24]
 8004944:	b90b      	cbnz	r3, 800494a <__swbuf_r+0x12>
 8004946:	f7ff fa1b 	bl	8003d80 <__sinit>
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <__swbuf_r+0x98>)
 800494c:	429c      	cmp	r4, r3
 800494e:	d12a      	bne.n	80049a6 <__swbuf_r+0x6e>
 8004950:	686c      	ldr	r4, [r5, #4]
 8004952:	69a3      	ldr	r3, [r4, #24]
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	071a      	lsls	r2, r3, #28
 800495a:	d52e      	bpl.n	80049ba <__swbuf_r+0x82>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	b363      	cbz	r3, 80049ba <__swbuf_r+0x82>
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	6820      	ldr	r0, [r4, #0]
 8004964:	b2f6      	uxtb	r6, r6
 8004966:	1ac0      	subs	r0, r0, r3
 8004968:	6963      	ldr	r3, [r4, #20]
 800496a:	4637      	mov	r7, r6
 800496c:	4283      	cmp	r3, r0
 800496e:	dc04      	bgt.n	800497a <__swbuf_r+0x42>
 8004970:	4621      	mov	r1, r4
 8004972:	4628      	mov	r0, r5
 8004974:	f000 f948 	bl	8004c08 <_fflush_r>
 8004978:	bb28      	cbnz	r0, 80049c6 <__swbuf_r+0x8e>
 800497a:	68a3      	ldr	r3, [r4, #8]
 800497c:	3001      	adds	r0, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	60a3      	str	r3, [r4, #8]
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	6022      	str	r2, [r4, #0]
 8004988:	701e      	strb	r6, [r3, #0]
 800498a:	6963      	ldr	r3, [r4, #20]
 800498c:	4283      	cmp	r3, r0
 800498e:	d004      	beq.n	800499a <__swbuf_r+0x62>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	07db      	lsls	r3, r3, #31
 8004994:	d519      	bpl.n	80049ca <__swbuf_r+0x92>
 8004996:	2e0a      	cmp	r6, #10
 8004998:	d117      	bne.n	80049ca <__swbuf_r+0x92>
 800499a:	4621      	mov	r1, r4
 800499c:	4628      	mov	r0, r5
 800499e:	f000 f933 	bl	8004c08 <_fflush_r>
 80049a2:	b190      	cbz	r0, 80049ca <__swbuf_r+0x92>
 80049a4:	e00f      	b.n	80049c6 <__swbuf_r+0x8e>
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <__swbuf_r+0x9c>)
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d101      	bne.n	80049b0 <__swbuf_r+0x78>
 80049ac:	68ac      	ldr	r4, [r5, #8]
 80049ae:	e7d0      	b.n	8004952 <__swbuf_r+0x1a>
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <__swbuf_r+0xa0>)
 80049b2:	429c      	cmp	r4, r3
 80049b4:	bf08      	it	eq
 80049b6:	68ec      	ldreq	r4, [r5, #12]
 80049b8:	e7cb      	b.n	8004952 <__swbuf_r+0x1a>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4628      	mov	r0, r5
 80049be:	f000 f81f 	bl	8004a00 <__swsetup_r>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0cc      	beq.n	8004960 <__swbuf_r+0x28>
 80049c6:	f04f 37ff 	mov.w	r7, #4294967295
 80049ca:	4638      	mov	r0, r7
 80049cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08004ed0 	.word	0x08004ed0
 80049d4:	08004ef0 	.word	0x08004ef0
 80049d8:	08004eb0 	.word	0x08004eb0

080049dc <_write_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4605      	mov	r5, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	2200      	movs	r2, #0
 80049e6:	4c05      	ldr	r4, [pc, #20]	; (80049fc <_write_r+0x20>)
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc f8c2 	bl	8000b74 <_write>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_write_r+0x1e>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_write_r+0x1e>
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	200002b8 	.word	0x200002b8

08004a00 <__swsetup_r>:
 8004a00:	4b32      	ldr	r3, [pc, #200]	; (8004acc <__swsetup_r+0xcc>)
 8004a02:	b570      	push	{r4, r5, r6, lr}
 8004a04:	681d      	ldr	r5, [r3, #0]
 8004a06:	4606      	mov	r6, r0
 8004a08:	460c      	mov	r4, r1
 8004a0a:	b125      	cbz	r5, 8004a16 <__swsetup_r+0x16>
 8004a0c:	69ab      	ldr	r3, [r5, #24]
 8004a0e:	b913      	cbnz	r3, 8004a16 <__swsetup_r+0x16>
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff f9b5 	bl	8003d80 <__sinit>
 8004a16:	4b2e      	ldr	r3, [pc, #184]	; (8004ad0 <__swsetup_r+0xd0>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	d10f      	bne.n	8004a3c <__swsetup_r+0x3c>
 8004a1c:	686c      	ldr	r4, [r5, #4]
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	0715      	lsls	r5, r2, #28
 8004a26:	d42c      	bmi.n	8004a82 <__swsetup_r+0x82>
 8004a28:	06d0      	lsls	r0, r2, #27
 8004a2a:	d411      	bmi.n	8004a50 <__swsetup_r+0x50>
 8004a2c:	2209      	movs	r2, #9
 8004a2e:	6032      	str	r2, [r6, #0]
 8004a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3a:	e03e      	b.n	8004aba <__swsetup_r+0xba>
 8004a3c:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <__swsetup_r+0xd4>)
 8004a3e:	429c      	cmp	r4, r3
 8004a40:	d101      	bne.n	8004a46 <__swsetup_r+0x46>
 8004a42:	68ac      	ldr	r4, [r5, #8]
 8004a44:	e7eb      	b.n	8004a1e <__swsetup_r+0x1e>
 8004a46:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <__swsetup_r+0xd8>)
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	bf08      	it	eq
 8004a4c:	68ec      	ldreq	r4, [r5, #12]
 8004a4e:	e7e6      	b.n	8004a1e <__swsetup_r+0x1e>
 8004a50:	0751      	lsls	r1, r2, #29
 8004a52:	d512      	bpl.n	8004a7a <__swsetup_r+0x7a>
 8004a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a56:	b141      	cbz	r1, 8004a6a <__swsetup_r+0x6a>
 8004a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	d002      	beq.n	8004a66 <__swsetup_r+0x66>
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7ff fd31 	bl	80044c8 <_free_r>
 8004a66:	2300      	movs	r3, #0
 8004a68:	6363      	str	r3, [r4, #52]	; 0x34
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	2300      	movs	r3, #0
 8004a74:	6063      	str	r3, [r4, #4]
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f043 0308 	orr.w	r3, r3, #8
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	b94b      	cbnz	r3, 8004a9a <__swsetup_r+0x9a>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a90:	d003      	beq.n	8004a9a <__swsetup_r+0x9a>
 8004a92:	4621      	mov	r1, r4
 8004a94:	4630      	mov	r0, r6
 8004a96:	f000 f917 	bl	8004cc8 <__smakebuf_r>
 8004a9a:	89a2      	ldrh	r2, [r4, #12]
 8004a9c:	f012 0301 	ands.w	r3, r2, #1
 8004aa0:	d00c      	beq.n	8004abc <__swsetup_r+0xbc>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60a3      	str	r3, [r4, #8]
 8004aa6:	6963      	ldr	r3, [r4, #20]
 8004aa8:	425b      	negs	r3, r3
 8004aaa:	61a3      	str	r3, [r4, #24]
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	b953      	cbnz	r3, 8004ac6 <__swsetup_r+0xc6>
 8004ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ab8:	d1ba      	bne.n	8004a30 <__swsetup_r+0x30>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	0792      	lsls	r2, r2, #30
 8004abe:	bf58      	it	pl
 8004ac0:	6963      	ldrpl	r3, [r4, #20]
 8004ac2:	60a3      	str	r3, [r4, #8]
 8004ac4:	e7f2      	b.n	8004aac <__swsetup_r+0xac>
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	e7f7      	b.n	8004aba <__swsetup_r+0xba>
 8004aca:	bf00      	nop
 8004acc:	20000014 	.word	0x20000014
 8004ad0:	08004ed0 	.word	0x08004ed0
 8004ad4:	08004ef0 	.word	0x08004ef0
 8004ad8:	08004eb0 	.word	0x08004eb0

08004adc <_close_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	2300      	movs	r3, #0
 8004ae0:	4c05      	ldr	r4, [pc, #20]	; (8004af8 <_close_r+0x1c>)
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	f7fc fb4d 	bl	8001186 <_close>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_close_r+0x1a>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_close_r+0x1a>
 8004af4:	602b      	str	r3, [r5, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	200002b8 	.word	0x200002b8

08004afc <__sflush_r>:
 8004afc:	898a      	ldrh	r2, [r1, #12]
 8004afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b02:	4605      	mov	r5, r0
 8004b04:	0710      	lsls	r0, r2, #28
 8004b06:	460c      	mov	r4, r1
 8004b08:	d458      	bmi.n	8004bbc <__sflush_r+0xc0>
 8004b0a:	684b      	ldr	r3, [r1, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dc05      	bgt.n	8004b1c <__sflush_r+0x20>
 8004b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dc02      	bgt.n	8004b1c <__sflush_r+0x20>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d0f9      	beq.n	8004b16 <__sflush_r+0x1a>
 8004b22:	2300      	movs	r3, #0
 8004b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b28:	682f      	ldr	r7, [r5, #0]
 8004b2a:	6a21      	ldr	r1, [r4, #32]
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	d032      	beq.n	8004b96 <__sflush_r+0x9a>
 8004b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	075a      	lsls	r2, r3, #29
 8004b36:	d505      	bpl.n	8004b44 <__sflush_r+0x48>
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	1ac0      	subs	r0, r0, r3
 8004b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b3e:	b10b      	cbz	r3, 8004b44 <__sflush_r+0x48>
 8004b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b42:	1ac0      	subs	r0, r0, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	4602      	mov	r2, r0
 8004b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b4a:	6a21      	ldr	r1, [r4, #32]
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	d106      	bne.n	8004b64 <__sflush_r+0x68>
 8004b56:	6829      	ldr	r1, [r5, #0]
 8004b58:	291d      	cmp	r1, #29
 8004b5a:	d848      	bhi.n	8004bee <__sflush_r+0xf2>
 8004b5c:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <__sflush_r+0x108>)
 8004b5e:	40ca      	lsrs	r2, r1
 8004b60:	07d6      	lsls	r6, r2, #31
 8004b62:	d544      	bpl.n	8004bee <__sflush_r+0xf2>
 8004b64:	2200      	movs	r2, #0
 8004b66:	6062      	str	r2, [r4, #4]
 8004b68:	6922      	ldr	r2, [r4, #16]
 8004b6a:	04d9      	lsls	r1, r3, #19
 8004b6c:	6022      	str	r2, [r4, #0]
 8004b6e:	d504      	bpl.n	8004b7a <__sflush_r+0x7e>
 8004b70:	1c42      	adds	r2, r0, #1
 8004b72:	d101      	bne.n	8004b78 <__sflush_r+0x7c>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b903      	cbnz	r3, 8004b7a <__sflush_r+0x7e>
 8004b78:	6560      	str	r0, [r4, #84]	; 0x54
 8004b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b7c:	602f      	str	r7, [r5, #0]
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d0c9      	beq.n	8004b16 <__sflush_r+0x1a>
 8004b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b86:	4299      	cmp	r1, r3
 8004b88:	d002      	beq.n	8004b90 <__sflush_r+0x94>
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f7ff fc9c 	bl	80044c8 <_free_r>
 8004b90:	2000      	movs	r0, #0
 8004b92:	6360      	str	r0, [r4, #52]	; 0x34
 8004b94:	e7c0      	b.n	8004b18 <__sflush_r+0x1c>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b0      	blx	r6
 8004b9c:	1c41      	adds	r1, r0, #1
 8004b9e:	d1c8      	bne.n	8004b32 <__sflush_r+0x36>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0c5      	beq.n	8004b32 <__sflush_r+0x36>
 8004ba6:	2b1d      	cmp	r3, #29
 8004ba8:	d001      	beq.n	8004bae <__sflush_r+0xb2>
 8004baa:	2b16      	cmp	r3, #22
 8004bac:	d101      	bne.n	8004bb2 <__sflush_r+0xb6>
 8004bae:	602f      	str	r7, [r5, #0]
 8004bb0:	e7b1      	b.n	8004b16 <__sflush_r+0x1a>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	e7ad      	b.n	8004b18 <__sflush_r+0x1c>
 8004bbc:	690f      	ldr	r7, [r1, #16]
 8004bbe:	2f00      	cmp	r7, #0
 8004bc0:	d0a9      	beq.n	8004b16 <__sflush_r+0x1a>
 8004bc2:	0793      	lsls	r3, r2, #30
 8004bc4:	bf18      	it	ne
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	680e      	ldr	r6, [r1, #0]
 8004bca:	bf08      	it	eq
 8004bcc:	694b      	ldreq	r3, [r1, #20]
 8004bce:	eba6 0807 	sub.w	r8, r6, r7
 8004bd2:	600f      	str	r7, [r1, #0]
 8004bd4:	608b      	str	r3, [r1, #8]
 8004bd6:	f1b8 0f00 	cmp.w	r8, #0
 8004bda:	dd9c      	ble.n	8004b16 <__sflush_r+0x1a>
 8004bdc:	4643      	mov	r3, r8
 8004bde:	463a      	mov	r2, r7
 8004be0:	6a21      	ldr	r1, [r4, #32]
 8004be2:	4628      	mov	r0, r5
 8004be4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004be6:	47b0      	blx	r6
 8004be8:	2800      	cmp	r0, #0
 8004bea:	dc06      	bgt.n	8004bfa <__sflush_r+0xfe>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	e78e      	b.n	8004b18 <__sflush_r+0x1c>
 8004bfa:	4407      	add	r7, r0
 8004bfc:	eba8 0800 	sub.w	r8, r8, r0
 8004c00:	e7e9      	b.n	8004bd6 <__sflush_r+0xda>
 8004c02:	bf00      	nop
 8004c04:	20400001 	.word	0x20400001

08004c08 <_fflush_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	690b      	ldr	r3, [r1, #16]
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	b1db      	cbz	r3, 8004c4a <_fflush_r+0x42>
 8004c12:	b118      	cbz	r0, 8004c1c <_fflush_r+0x14>
 8004c14:	6983      	ldr	r3, [r0, #24]
 8004c16:	b90b      	cbnz	r3, 8004c1c <_fflush_r+0x14>
 8004c18:	f7ff f8b2 	bl	8003d80 <__sinit>
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <_fflush_r+0x48>)
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d109      	bne.n	8004c36 <_fflush_r+0x2e>
 8004c22:	686c      	ldr	r4, [r5, #4]
 8004c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c28:	b17b      	cbz	r3, 8004c4a <_fflush_r+0x42>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c32:	f7ff bf63 	b.w	8004afc <__sflush_r>
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <_fflush_r+0x4c>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	d101      	bne.n	8004c40 <_fflush_r+0x38>
 8004c3c:	68ac      	ldr	r4, [r5, #8]
 8004c3e:	e7f1      	b.n	8004c24 <_fflush_r+0x1c>
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <_fflush_r+0x50>)
 8004c42:	429c      	cmp	r4, r3
 8004c44:	bf08      	it	eq
 8004c46:	68ec      	ldreq	r4, [r5, #12]
 8004c48:	e7ec      	b.n	8004c24 <_fflush_r+0x1c>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	08004ed0 	.word	0x08004ed0
 8004c54:	08004ef0 	.word	0x08004ef0
 8004c58:	08004eb0 	.word	0x08004eb0

08004c5c <_lseek_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	2200      	movs	r2, #0
 8004c66:	4c05      	ldr	r4, [pc, #20]	; (8004c7c <_lseek_r+0x20>)
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fc faaf 	bl	80011ce <_lseek>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_lseek_r+0x1e>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_lseek_r+0x1e>
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	200002b8 	.word	0x200002b8

08004c80 <__swhatbuf_r>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	460e      	mov	r6, r1
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	b096      	sub	sp, #88	; 0x58
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	461d      	mov	r5, r3
 8004c90:	da07      	bge.n	8004ca2 <__swhatbuf_r+0x22>
 8004c92:	2300      	movs	r3, #0
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	89b3      	ldrh	r3, [r6, #12]
 8004c98:	061a      	lsls	r2, r3, #24
 8004c9a:	d410      	bmi.n	8004cbe <__swhatbuf_r+0x3e>
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	e00e      	b.n	8004cc0 <__swhatbuf_r+0x40>
 8004ca2:	466a      	mov	r2, sp
 8004ca4:	f000 f884 	bl	8004db0 <_fstat_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	dbf2      	blt.n	8004c92 <__swhatbuf_r+0x12>
 8004cac:	9a01      	ldr	r2, [sp, #4]
 8004cae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cb6:	425a      	negs	r2, r3
 8004cb8:	415a      	adcs	r2, r3
 8004cba:	602a      	str	r2, [r5, #0]
 8004cbc:	e7ee      	b.n	8004c9c <__swhatbuf_r+0x1c>
 8004cbe:	2340      	movs	r3, #64	; 0x40
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	b016      	add	sp, #88	; 0x58
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}

08004cc8 <__smakebuf_r>:
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ccc:	079d      	lsls	r5, r3, #30
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	d507      	bpl.n	8004ce4 <__smakebuf_r+0x1c>
 8004cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	6163      	str	r3, [r4, #20]
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	ab01      	add	r3, sp, #4
 8004ce6:	466a      	mov	r2, sp
 8004ce8:	f7ff ffca 	bl	8004c80 <__swhatbuf_r>
 8004cec:	9900      	ldr	r1, [sp, #0]
 8004cee:	4605      	mov	r5, r0
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff fc35 	bl	8004560 <_malloc_r>
 8004cf6:	b948      	cbnz	r0, 8004d0c <__smakebuf_r+0x44>
 8004cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfc:	059a      	lsls	r2, r3, #22
 8004cfe:	d4ef      	bmi.n	8004ce0 <__smakebuf_r+0x18>
 8004d00:	f023 0303 	bic.w	r3, r3, #3
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	e7e3      	b.n	8004cd4 <__smakebuf_r+0xc>
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <__smakebuf_r+0x7c>)
 8004d0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	6020      	str	r0, [r4, #0]
 8004d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	9b00      	ldr	r3, [sp, #0]
 8004d1c:	6120      	str	r0, [r4, #16]
 8004d1e:	6163      	str	r3, [r4, #20]
 8004d20:	9b01      	ldr	r3, [sp, #4]
 8004d22:	b15b      	cbz	r3, 8004d3c <__smakebuf_r+0x74>
 8004d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 f853 	bl	8004dd4 <_isatty_r>
 8004d2e:	b128      	cbz	r0, 8004d3c <__smakebuf_r+0x74>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	431d      	orrs	r5, r3
 8004d40:	81a5      	strh	r5, [r4, #12]
 8004d42:	e7cd      	b.n	8004ce0 <__smakebuf_r+0x18>
 8004d44:	08003d49 	.word	0x08003d49

08004d48 <__ascii_mbtowc>:
 8004d48:	b082      	sub	sp, #8
 8004d4a:	b901      	cbnz	r1, 8004d4e <__ascii_mbtowc+0x6>
 8004d4c:	a901      	add	r1, sp, #4
 8004d4e:	b142      	cbz	r2, 8004d62 <__ascii_mbtowc+0x1a>
 8004d50:	b14b      	cbz	r3, 8004d66 <__ascii_mbtowc+0x1e>
 8004d52:	7813      	ldrb	r3, [r2, #0]
 8004d54:	600b      	str	r3, [r1, #0]
 8004d56:	7812      	ldrb	r2, [r2, #0]
 8004d58:	1c10      	adds	r0, r2, #0
 8004d5a:	bf18      	it	ne
 8004d5c:	2001      	movne	r0, #1
 8004d5e:	b002      	add	sp, #8
 8004d60:	4770      	bx	lr
 8004d62:	4610      	mov	r0, r2
 8004d64:	e7fb      	b.n	8004d5e <__ascii_mbtowc+0x16>
 8004d66:	f06f 0001 	mvn.w	r0, #1
 8004d6a:	e7f8      	b.n	8004d5e <__ascii_mbtowc+0x16>

08004d6c <__malloc_lock>:
 8004d6c:	4770      	bx	lr

08004d6e <__malloc_unlock>:
 8004d6e:	4770      	bx	lr

08004d70 <_read_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4c05      	ldr	r4, [pc, #20]	; (8004d90 <_read_r+0x20>)
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f7fc f9e4 	bl	800114c <_read>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_read_r+0x1e>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_read_r+0x1e>
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	200002b8 	.word	0x200002b8

08004d94 <__ascii_wctomb>:
 8004d94:	b149      	cbz	r1, 8004daa <__ascii_wctomb+0x16>
 8004d96:	2aff      	cmp	r2, #255	; 0xff
 8004d98:	bf8b      	itete	hi
 8004d9a:	238a      	movhi	r3, #138	; 0x8a
 8004d9c:	700a      	strbls	r2, [r1, #0]
 8004d9e:	6003      	strhi	r3, [r0, #0]
 8004da0:	2001      	movls	r0, #1
 8004da2:	bf88      	it	hi
 8004da4:	f04f 30ff 	movhi.w	r0, #4294967295
 8004da8:	4770      	bx	lr
 8004daa:	4608      	mov	r0, r1
 8004dac:	4770      	bx	lr
	...

08004db0 <_fstat_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	2300      	movs	r3, #0
 8004db4:	4c06      	ldr	r4, [pc, #24]	; (8004dd0 <_fstat_r+0x20>)
 8004db6:	4605      	mov	r5, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	f7fc f9ed 	bl	800119c <_fstat>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d102      	bne.n	8004dcc <_fstat_r+0x1c>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	b103      	cbz	r3, 8004dcc <_fstat_r+0x1c>
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	bf00      	nop
 8004dd0:	200002b8 	.word	0x200002b8

08004dd4 <_isatty_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4c05      	ldr	r4, [pc, #20]	; (8004df0 <_isatty_r+0x1c>)
 8004dda:	4605      	mov	r5, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	f7fc f9eb 	bl	80011ba <_isatty>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_isatty_r+0x1a>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_isatty_r+0x1a>
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	200002b8 	.word	0x200002b8

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
